%%% Copyright (C) 2022 Vincent Goulet
%%%
%%% Ce fichier fait partie du projet
%%% «Programmer avec R»
%%% https://gitlab.com/vigou3/programmer-avec-r
%%%
%%% Cette création est mise à disposition sous licence
%%% Attribution-Partage dans les mêmes conditions 4.0
%%% International de Creative Commons.
%%% https://creativecommons.org/licenses/by-sa/4.0/

\chapter{Bibliothèques et paquetages}
\label{chap:paquetages}

\def\scriptfilename{\currfilebase.R}
\SweaveOpts{echo=FALSE}
\SweaveInput{share/license-by-sa.nw}

<<echo=FALSE, results=hide>>=
source(".Sweaveprofile")   # configuration
source("Stangle.R")        # lancement de Stangle
@
<<script>>=
<<license-by-sa>>
@

\begin{objectifs}
\item Distinguer les concepts de bibliothèque et de paquetage dans R.
\item Utiliser les fonctionnalités d'un paquetage dans une session de
  travail R.
\item Installer de nouveaux paquetages R depuis le site
  \emph{Comprehensive R Archive Network} (CRAN).
\end{objectifs}

L'un des aspects de R ayant sans aucun doute le plus contribué à son
succès est la possibilité --- et la facilité --- d'ajouter des
extensions au système de base par le biais de paquetages. Toute
personne utilisant R sera un jour appelée à utiliser des paquetages.
Ce chapitre explique comment ajouter une bibliothèque personnelle au
système et comment la garnir de paquetages téléchargés depuis le site
\emph{Comprehensive R Archive Network} (CRAN).

Dans la terminologie de R, un \index{paquetage}\emph{paquetage}
(\emph{package}\footnote{%
  L'équipe de traduction française de R a choisi de conserver le terme
  anglais. Je ne les suis pas dans cette voie.}). %
est un ensemble cohérent de fonctions, de jeux de données et de
documentation. Les paquetages sont regroupés dans une
\emph{bibliothèque} (\emph{library}).

\warningbox{Insistons sur la terminologie puisque la confusion règne
  souvent hors de la documentation officielle de R: un paquetage est
  un ensemble de fonctions, alors qu'une bibliothèque est un ensemble
  de paquetages.}


\section{Système de base}
\label{sec:paquetages:base}

La bibliothèque de base de R contient une trentaine de paquetages dont
certains sont chargés par défaut au démarrage. La fonction
\icode{search} fournit la liste des paquetages chargés dans la session
de travail, alors que \icode{library} affiche le contenu de la
bibliothèque de paquetages.
\begin{Schunk}
\begin{Sinput}
> search()
\end{Sinput}
\begin{Soutput}
<<echo=FALSE, results=tex, strip.white=false>>=
search()
@
\end{Soutput}
\begin{Sinput}
> library()
\end{Sinput}
\begin{Soutput}[commandchars=\\\{\}]
Packages dans la bibliothèque
‘/Library/Frameworks/R.framework/\meta{...}/library’ :

base           The R Base Package
boot           Bootstrap Functions
               (Originally by Angelo Canty for S)
...
\end{Soutput}
\end{Schunk}


\section{Utilisation d'un paquetage}
\label{sec:paquetages:utilisation}

Pour rendre disponibles les fonctionnalités d'un paquetage, peu
importe sa provenance, il faut le charger dans la session de travail.
C'est le rôle principal de la fonction \Icode{library}.
\begin{Schunk}
\begin{Verbatim}[commandchars=\\\{\}]
library("\meta{paquetage}")
\end{Verbatim}
\end{Schunk}


\section{Création d'une bibliothèque personnelle}
\label{sec:paquetages:library}

Nous verrons à la \autoref{sec:paquetages:install} comment ajouter des
paquetages au système de base. Je vous recommande fortement de prévoir
une bibliothèque personnelle pour contenir ces nouveaux paquetages.
Tout d'abord, cela permet d'éviter les éventuels problèmes d'accès en
écriture dans la bibliothèque principale, surtout sur des systèmes
partagés. Ensuite, les paquetages placés dans une bibliothèque
personnelle résistent mieux au processus de mise à jour de R que ceux
ajoutés à la bibliothèque principale. Il s'agit d'un préréglage
absolu\footnote{L'expression «préréglage absolu» est celle proposée
  par l'Office québécois de la langue française comme équivalent de
  l'expression anglaise \emph{set and forget}.} %
que vous aurez à effectuer une seule fois. L'investissement en temps
--- minime --- en vaut largement la peine.

La mise sur pied d'une bibliothèque personnelle consiste simplement à
créer un répertoire dans son système de fichier pour accueillir la
bibliothèque, puis à indiquer à R, via un fichier de configuration,
l'existence et l'emplacement de cette bibliothèque.

Voici une procédure pas à pas pour compléter les opérations de
création d'une bibliothèque personnelle depuis une une ligne de
commande Unix (\index{Terminal}Terminal sous macOS; \index{MSYS}MSYS
de \index{MSYS2}\link{https://www.msys2.org}{MSYS2} ou
\index{Git~Bash}Git~Bash de \link{https://git-scm.com/downloads}{Git
  for Windows} sous Windows; terminal RStudio).

\begin{enumerate}
\item Créer les répertoires dans votre système de fichiers pour
  accueillir la bibliothèque personnelle. Sous macOS, je recommande
  d'utiliser le répertoire \code{\string~/Library/R/library}. Pour les
  autres systèmes d'exploitation, \code{\string~/R/library} devrait
  convenir. (Ici, «\code{\string~}» représente le dossier de départ
  tel qu'expliqué à la \autoref{sec:informatique:os:unix}.)
  \begin{trivlist}
  \item \textbf{macOS}
    \begin{Schunk}
\begin{Verbatim}
$ mkdir -p ~/Library/R/library
\end{Verbatim}
    \end{Schunk}
  \item \textbf{autres systèmes d'exploitation}
    \begin{Schunk}
\begin{Verbatim}
$ mkdir -p ~/R/library
\end{Verbatim}
    \end{Schunk}
  \end{trivlist}
\item Inscrire l'emplacement de la bibliothèque dans le fichier de
  configuration \code{\string~/.Renviron} que R lit au démarrage.
  \begin{trivlist}
  \item \textbf{macOS}
    \begin{Schunk}
\begin{Verbatim}
$ cat >> ~/.Renviron <<EOF
R_LIBS_USER="~/Library/R/library"
EOF
\end{Verbatim}
    \end{Schunk}
  \item \textbf{autres systèmes d'exploitation}
    \begin{Schunk}
\begin{Verbatim}
$ cat >> ~/.Renviron <<EOF
R_LIBS_USER="~/R/library"
EOF
\end{Verbatim}
    \end{Schunk}
  \end{trivlist}
\item Démarrer ou redémarrer R et, depuis à la ligne de commande de R,
  vérifier que le chemin vers la bibliothèque personnelle apparait
  dans les résultats de la commande
  \index{libPaths@\code{.libPaths}}\code{.libPaths}.
  \begin{Schunk}
\begin{Sinput}
> .libPaths()
\end{Sinput}
\begin{Soutput}[commandchars=\\\{\}]
<<echo=FALSE, results=tex, strip.white=false>>=
cat(paste0('"', sub("Versions/.*?/Resources", "\\\\meta{...}", .libPaths()), '"'),
    fill = TRUE, labels = c("[1]", "[2]"))
@
\end{Soutput}
  \end{Schunk}
\item Il n'y a même pas de quatrième étape.
\end{enumerate}

La bibliothèque personnelle a toujours préséance sur la bibliothèque
principale.

\tipbox{Consultez la rubriques d'aide de \icode{Startup} pour les
  détails sur la syntaxe et l'emplacement des fichiers de
  configuration et celles de \icode{library} et de
  \index{libPaths@\code{.libPaths}}\code{.libPaths} pour la gestion
  des bibliothèques.}

\gotorbox{Le fichier de script \code{\scriptfilename} reproduit à la
  \autoref{sec:paquetages:exemples} propose, aux lignes
  \reflines{paquetages:library}, une procédure alternative --- et en
  tous points équivalente --- pour créer une bibliothèque personnelle
  entièrement depuis la ligne de commande de R.}

<<script, results=hide>>=
###
### CRÉATION D'UNE BIBLIOTHÈQUE PERSONNELLE `\labelline{paquetages:library}`
###

## Liste des bibliothèques consultées par R. Votre
## bibliothèque personnelle devrait y apparaitre si vous avez
## suivi la procédure expliquée dans le chapitre.
.libPaths()

## Comme alternative à la procédure du chapitre, il est
## possible de créer le répertoire pour la bibliothèque
## personnelle et d'inscrire son emplacement dans le fichier
## ~/.Renviron directement depuis R.
##
## Tout d'abord, la commande 'dir.create' crée un répertoire
## dans le système de fichier. Adaptez les chemins d'accès
## selon vos besoins.
##
## Si vous êtes sous macOS, utilisez la commande suivante.
##-!- dir.create("~/Library/R/library", recursive = TRUE) # macOS

## Pour tous les autres systèmes d'exploitation, utilisez
## plutôt la commande suivante.
##-!- dir.create("~/R/library", recursive = TRUE) # autres OS

## Ensuite, la commande 'cat' permet d'écrire directement dans
## un fichier. Assurez-vous que le chemin d'accès correspond à
## celui utilisé ci-dessus.
##
## Comme dans les instructions du chapitre, les commandes
## ci-dessous ajoutent du contenu à un fichier si celui-ci
## existe déjà. Évitez donc d'évaluer les expressions
## plusieurs fois.
##
## Si vous êtes sous macOS, utilisez la commande suivante.
##-!- cat('R_LIBS_USER="~/Library/R/library"', file = "~/.Renviron",
##-!-     append = TRUE)

## Pour tous les autres systèmes d'exploitation, utilisez
## plutôt la commande suivante.
##-!- cat('R_LIBS_USER="~/R/library"', file = "~/.Renviron",
##-!-     append = TRUE)

## Vérification: afficher le contenu du fichier ~/.Renviron.
##-!- file.show("~/.Renviron")  #-*- `\labelline{paquetages:library:fin}`
@


\section{Installation de paquetages additionnels}
\label{sec:paquetages:install}

Dès les débuts de R, les développeurs et utilisateurs ont mis sur pied
le dépôt central de paquetages
\link{https://cran.r-project.org}{\emph{Comprehensive R Archive
    Network}} (CRAN). Ce site compte aujourd'hui des milliers de
paquetages et le nombre ne cesse de croitre.

L'installation d'un paquetage distribué via CRAN est très simple avec
la fonction \Icode{install.packages}. Celle-ci télécharge le paquetage
spécifié en argument depuis CRAN et l'installe, par défaut, dans la
première bibliothèque de
\index{libPaths@\code{.libPaths}}\code{.libPaths}.
\begin{Schunk}
\begin{Verbatim}[commandchars=\\\{\}]
install.packages("\meta{paquetage}")
\end{Verbatim}
\end{Schunk}

Pour utiliser le paquetage, il faut le charger en mémoire avec
\icode{library}, tel qu'expliqué à la
\autoref{sec:paquetages:utilisation}. R recherche le paquetage
spécifié dans les bibliothèques de
\index{libPaths@\code{.libPaths}}\code{.libPaths}.

\gotorbox{Étudiez l'intégralité du fichier de script
  \code{\scriptfilename} reproduit à la
  \autoref{sec:paquetages:exemples}.}

<<script, results=hide>>=
###
### SYSTÈME DE BASE
###

## La fonction 'search' retourne la liste des environnements
## dans lesquels R va chercher un objet (en particulier une
## fonction). '.GlobalEnv' est l'environnement de travail.
search()

## Liste de tous les packages installés sur votre système.
## Noter que MASS et tools en font partie. Ce sont des
## paquetages livrés avec R, mais qui ne sont pas chargés par
## défaut.
##-!- library()

###
### UTILISATION D'UN PAQUETAGE
###

## Chargement du package MASS qui contient plusieurs fonctions
## statistiques très utiles.
##-!- library("MASS")

###
### INSTALLATION DE PAQUETAGES ADDITIONNELS
###

## Installation du paquetage actuar depuis un site miroir de
## CRAN sélectionné automatiquement.
##
## Si vous avez configuré une bibliothèque personnelle et
## qu'elle apparait dans le résultat de '.libPaths()',
## ci-dessus, le paquetage sera automatiquement installé dans
## celle-ci.
##-!- install.packages("actuar", repos = "https://cloud.r-project.org")

## Chargement du paquetage dans la session de travail. R
## recherche le paquetage dans toutes les bibliothèques de
## '.libPaths()'.
library("actuar")
@


\section{Exemples}
\label{sec:paquetages:exemples}

\scriptfile{\scriptfilename}
\lstinputlisting[firstline=\scriptfirstline]{\scriptfilename}


\section{Exercices}
\label{sec:paquetages:exercices}

\begin{exercice}[nosol]
  Installer un paquetage disponible dans CRAN dans une bibliothèque
  personnelle sur votre poste de travail.
\end{exercice}

%%% Local Variables:
%%% mode: noweb
%%% TeX-engine: xetex
%%% TeX-master: "programmer-avec-r"
%%% coding: utf-8
%%% End:
