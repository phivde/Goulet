%%% Copyright (C) 2019 Vincent Goulet
%%%
%%% Ce fichier fait partie du projet
%%% «Programmer avec R»
%%% https://gitlab.com/vigou3/programmer-avec-r
%%%
%%% Cette création est mise à disposition sous licence
%%% Attribution-Partage dans les mêmes conditions 4.0
%%% International de Creative Commons.
%%% https://creativecommons.org/licenses/by-sa/4.0/

\chapter{Tri et recherche}
\label{chap:tri}

\def\scriptfilename{\currfilebase.R}
\SweaveOpts{echo=FALSE}

<<echo=FALSE, results=hide>>=
source(".Sweaveprofile")   # configuration
source("Stangle.R")        # lancement de Stangle
@
<<script>>=
## Copyright (C) 2019 Vincent Goulet
##
## Ce fichier fait partie du projet
## «Programmer avec R»
## https://gitlab.com/vigou3/programmer-avec-r
##
## Cette création est mise à disposition sous licence
## Attribution-Partage dans les mêmes conditions 4.0
## International de Creative Commons.
## https://creativecommons.org/licenses/by-sa/4.0/
@

\begin{objectifs}
\item Expliquer les algorithmes classiques de tri et de recherche;
  comparer leurs avantages et inconvénients.
\item Concevoir une boucle itérative dans R.
\item Effectuer la mise en oeuvre d'un algorithme itératif dans le
  langage R.
\end{objectifs}

Nous nous sommes penchés sur le concept d'algorithme et sur les
principes de base de l'algorithmique au \autoref{chap:algorithmes}.
Or, \citet{Kernighan:practice:1999} font remarquer, fort à propos:
\begin{quote}
  Tous les programmes reposent sur des algorithmes et des structures
  de données, mais très peu de programmes exigent d'en concevoir de
  nouveaux.
\end{quote}
Autrement dit, aussi complexe soit-il, un programme repose souvent sur
quelques algorithmes fondamentaux bien connus et bien établis. À ce
titre, les algorithmes de tri et de recherche jouent un rôle
particulièrement important: on estime que 25~\% du temps de calcul des
ordinateurs dans le monde est consacré au tri et à la recherche! Ce
n'est pas pour rien que Donald Knuth consacre un volume entier de son
œuvre monumentale \emph{The Art of Computer Programming} à ce seul
sujet \citep{Knuth:ACP:vol3:1997}.

Ce chapitre est consacré à l'étude des algorithmes classiques de tri
et de recherche. Ces opérations sont par nature répétitives.
Le sujet se prête donc bien à la revue des boucles itératives.


\section{Boucles itératives}
\label{sec:tri:boucles}

Comme nous l'avons déjà vu, il existe deux grandes manières de répéter
des calculs en programmation: par \index{iteration@itération}itération
ou par \index{recursion@récursion}récursion. La récursion est très
simple à mettre en œuvre dans un langage fonctionnel comme R puisqu'il
suffit de faire en sorte qu'une fonction s'invoque elle-même,
idéalement, dans R, avec la fonction \icode{Recall}
(\autoref{sec:bases:recursion}).

Une procédure itérative répète un bloc d'instructions, habituellement
avec un léger changement d'état, jusqu'à ce qu'un nombre de
répétitions soit atteint ou qu'une condition soit satisfaite. C'est ce
que l'on appelle communément une \emph{boucle} (\emph{loop}). La
présente section étudie les structures de contrôles itératives de R.
Elles sont de trois types: la boucle à contrôle par dénombrement
(boucle \code{for}), la boucle à précondition «tant que» (boucle
\code{while}) et la boucle à condition d'arrêt (boucle \code{repeat}).

\warningbox{Les boucles sont beaucoup moins utilisées dans R que dans
  la plupart des autres langages de programmation. Avant d'utiliser
  une boucle, demandez-vous si l'arithmétique vectorielle ou une
  fonction d'application ne pourrait faire le travail de manière plus
  claire et plus efficace.}

\subsection{Boucle à dénombrement}
\label{sec:tri:boucles:for}

La boucle à dénombrement \Icode{for} sert pour répéter une procédure
un nombre prédéterminé de fois. La syntaxe de la boucle \code{for} est
la suivante dans R:
\begin{Schunk}
\begin{Verbatim}[commandchars=\\\{\}]
for (\meta{variable} in \meta{suite})
    \meta{expression}
\end{Verbatim}
\end{Schunk}
\begin{itemize}
\item \meta{variable} est un \emph{compteur} ou, plus spécifiquement,
  un \emph{itérateur} qui prend successivement les valeurs contenues
  dans \meta{suite}. La variable est habituellement --- mais pas
  nécessairement --- utilisée dans les calculs à l'intérieur de la
  boucle.
\item \meta{suite} est un vecteur de valeurs. À noter que la
  \meta{suite} n'a pas à être composée de nombres consécutifs, ni même
  de nombres, en fait.
\item \meta{expression} est le contenu de la boucle à proprement
  parler. L'itérateur \meta{variable} apparait habituellement dans
  l'\meta{expression}. Comme toujours, si le contenu est constitué de
  plusieurs expressions, elles doivent être regroupées dans des
  accolades \verb={ }=.
\end{itemize}

La fonction ci-dessous est une mise en œuvre de
l'\autoref{algo:algorithmes:factorielle-iterative} du calcul de la
factorielle qui utilise une boucle \icode{for}. Remarquez comment la
boucle n'est exécutée que pour $n \geq 2$ afin d'éviter d'effectuer le
produit $1 \times 1$ dans le calcul de $1!$.
\begin{Schunk}
\begin{Verbatim}
factorial <- function(n)
{
    p <- 1
    for (i in seq(from = 2, length.out = n - 1))
        p <- p * i
    p
}
\end{Verbatim}
\end{Schunk}

\subsection{Boucle à précondition}
\label{sec:tri:boucles:while}

La boucle à précondition \Icode{while} exécute une procédure tant
qu'une condition est satisfaite. La condition étant vérifiée avant
d'entrer dans la boucle, celle-ci peut ne jamais s'exécuter. La
syntaxe de la boucle \code{while} est la suivante:
\begin{Schunk}
\begin{Verbatim}[commandchars=\\\{\}]
while(\meta{condition})
    \meta{expression}
\end{Verbatim}
\end{Schunk}
\begin{itemize}
\item \meta{condition} est une expression dont le résultat est une
  valeur \code{TRUE} ou \code{FALSE} unique.
\item \meta{expression} est une expression ou un groupe d'expressions
  entre accolades \verb={ }= qui sont exécutées tant que la
  \meta{condition} est \code{TRUE}.
\end{itemize}

Vous avez déjà rencontré la structure «tant que» dans la version en
pseudocode de l'algorithme d'Euclide
(\autoref{algo:algorithmes:euclide:pseudo}). Voici la mise en œuvre
correspondante avec une boucle \icode{while}.
\begin{Schunk}
\begin{Verbatim}
PGCD <- function(m, n)
{
    while (n != 0)
    {
        r <- m %% n
        m <- n
        n <- r
    }
    m
}
\end{Verbatim}
\end{Schunk}

\subsection{Boucle à condition d'arrêt}
\label{sec:tri:boucles:repeat}

Plusieurs langages de programmation comportent une structure itérative
à postcondition «répéter, tant que» (boucle \code{do ... while}) ou
«répéter, jusqu'à ce que» (boucle \code{do ... until}), voire les
deux. Dans R, la boucle à postcondition prend plutôt la forme d'une
boucle à condition d'arrêt \Icode{repeat}. La syntaxe de cette boucle
est on ne peut plus simple:
\begin{Schunk}
\begin{Verbatim}[commandchars=\\\{\}]
repeat
    \meta{expression}
\end{Verbatim}
\end{Schunk}
\begin{itemize}
\item \meta{expression} est l'expression ou le groupe d'expressions à
  répéter. En pratique, pour éviter que la boucle ne se répète
  indéfiniment, l'\meta{expression} est toujours un groupe
  d'expressions comportant un test d'arrêt.
\end{itemize}

Le test d'arrêt d'une boucle \icode{repeat} utilise habituellement la
commande \icode{break} (\autoref{sec:tri:boucles:flux}) pour forcer
la sortie de la boucle. Puisque le test se trouve à l'intérieur de la
boucle --- généralement à ou vers la fin ---, une boucle \icode{repeat}
est toujours exécutée au moins une fois. C'est d'ailleurs la grande
différence entre une boucle \icode{while} et une boucle \icode{repeat}.

Le fichier de script du \autoref{chap:pratiques} propose une fonction
\code{sqrt} pour calculer la racine carrée d'un nombre par
approximations successives. Elle a recours à une boucle à précondition
\icode{while}. Voici une variante qui utilise plutôt une boucle à
critère d'arrêt \icode{repeat}.
\begin{Schunk}
\begin{Verbatim}
sqrt <- function(x)
{
    y <- 1
    repeat
    {
        y <- (y + x/y)/2
        if (abs(y^2 - x) < 0.001)
            break
    }
    y
}
\end{Verbatim}
\end{Schunk}

\subsection{Contrôle du flux}
\label{sec:tri:boucles:flux}

Les commandes de contrôle du flux permettent d'infléchir le
déroulement normal d'une boucle.

\begin{ttscript}{break}
\item[\Icode{break}] Force la sortie de la boucle courante. La
  commande \code{break} peut être utilisée dans les boucles
  \icode{for} ou \icode{while}, mais elle est presque indissociable de
  la boucle \icode{repeat}, tel qu'illustré à la
  \autoref{sec:tri:boucles:repeat}.
\item[\Icode{next}] Force le passage à la prochaine itération de la
  boucle \icode{for}, \icode{while} ou \icode{repeat}. Comme
  \icode{break}, la commande est généralement utilisée à l'intérieur
  d'une structure conditionnelle.
\end{ttscript}

\subsection{Syndrome de la plaque à biscuits}
\label{sec:tri:boucles:syndrome}

Il arrive souvent que les fonctions itératives calculent un à un les
éléments d'un vecteur. Une erreur fréquente consiste à utiliser une
construction comme celle-ci pour effectuer les calculs.
\begin{Schunk}
\begin{Verbatim}[commandchars=\\+*]
{
    ...
    x <- numeric(0)
    for (i in seq_len(n))
        x <- c(x, \meta+calcul*)
    ...
}
\end{Verbatim}
\end{Schunk}

Le code ci-dessus est tout à fait valide. Pourquoi parler d'une
erreur, alors? Parce qu'il souffre du gros défaut suivant: la taille
du vecteur doit constamment augmenter pour stocker un résultat
additionnel.

Tentons une (autre) analogie alimentaire pour cette manière de
procéder. Pour ranger des biscuits frais sortis du four, vous prenez
un premier biscuit et vous le rangez dans un plat ne pouvant contenir
qu'un seul biscuit. Au second biscuit, constatant que le contenant
n'est pas assez grand, vous sortez un plat pouvant contenir deux
biscuits, vous changez le premier biscuit de plat et vous y rangez
aussi le second biscuit. Au troisième biscuit, le petit manège
recommence, et ainsi de suite jusqu'à ce que le plateau de biscuits
soit épuisé. C'est ce que je nomme, non sans un sourire en coin, le
Syndrome de la plaque à
biscuits{\texttrademark}\index{syndrome@Syndrome de la plaque à
  biscuits}\index{biscuits|see{Syndrome de la plaque à biscuits}}.

Le manège décrit ci-dessus se reproduit à l'identique dans la mémoire
de l'ordinateur, l'odeur des biscuits chauds en moins. En effet,
l'ordinateur doit constamment allouer de la nouvelle mémoire et
déplacer les termes déjà sauvegardés au fur et à mesure qu'un vecteur
grandit. Vous aurez compris qu'une telle façon de faire est à éviter
absolument lorsque c'est possible --- et ça l'est la plupart du temps.

Quand vous savez quelle sera la longueur finale d'un objet, il vaut
mieux créer un contenant vide de la bonne longueur et le remplir par
la suite avec une construction comme ci-dessous.
\begin{Schunk}
\begin{Verbatim}[commandchars=\\+*]
{
    ...
    x <- numeric(n)
    for (i in seq_len(n))
        x[i] <- \meta+calcul*
    ...
}
\end{Verbatim}
\end{Schunk}

\gotorbox{Les lignes \reflines{tri:boucles} du fichier de script
  \code{\scriptfilename} reproduit à la \autoref{sec:tri:exemples}
  proposent un exemple additionnel de fonction ayant recours à une
  boucle itérative.}

<<script, results=hide>>=
###
### BOUCLES ITÉRATIVES  `\labelline{tri:boucles}`
###

## Nous allons illustrer l'utilisation des boucles avec la
## méthode du point fixe. On dit qu'une valeur x est un «point
## fixe» d'une fonction f si cette valeur satisfait l'équation
##
##   x = f(x).
##
## La méthode numérique de recherche du point fixe d'une
## fonction f est simple et puissante: elle consiste à choisir
## une valeur de départ, puis à évaluer successivement f(x),
## f(f(x)), f(f(f(x))), ... jusqu'à ce que la valeur change
## «peu».
##
## L'algorithme est donc très simple:
##
## 1. Choisir une valeur de départ y.
## 2. Calculer x = f(y)
## 3. Si |x - y|/|x| >= e, poser y <- x et retourner à
##    l'étape 2.
## 4. Retourner x.
##
## Avant de poursuivre votre lecture, tentez d'identifier le
## meilleur type de boucle ('for', 'while' ou 'repeat') à
## utiliser pour programmer cet algorithme.

## La méthode de Newton du calcul de la racine carrée par
## approximations successives est un cas spécial de la méthode
## du point fixe. En effet, la racine carrée d'un nombre est
## la valeur positive de y satisfaisant l'équation y^2 = x.
## Cette équation peut se réécrire sous forme de point fixe
## ainsi:
##
##   y = (y + x/y)/2.
##
## Voici une nouvelle mise en oeuvre de la fonction 'sqrt' qui
## utilise la méthode du point fixe. Le critère d'arrêt y est
## exprimé non plus en fonction de l'écart entre 'y'^2 et 'x',
## mais plutôt en fonction de l'écart entre deux
## approximations successives. De plus, la valeur de départ et
## l'erreur d'approximation sont passés en argument à la
## fonction.
##
## Puisqu'il faut au minimum vérifier si la valeur initiale
## est un point fixe, nous utilisons une boucle 'repeat'.
sqrt <- function(x, start = 1, TOL = 1E-10)
{
    repeat
    {
        y <- (start + x/start)/2
        if (abs(y - start)/y < TOL)
            break
        start <- y
    }
    y
}

## Vérifions la validité de la fonction.
sqrt(9, 1)
sqrt(225, 1)
sqrt(3047, 50)

## Formidable. Toutefois, si nous voulions utiliser la méthode
## du point fixe pour résoudre une autre équation, il faudrait
## écrire une nouvelle fonction qui serait pour l'essentiel
## identique, sinon pour le calcul de la fonction
## (mathématique) f(x) pour laquelle nous cherchons le point
## fixe.
##
## Créons donc une fonction de point fixe générale qui prendra
## la fonction mathématique f(x) en argument.
fixed_point <- function(FUN, start, TOL = 1E-10)
{
    repeat
    {
        x <- FUN(start)
        if (abs(x - start)/x < TOL)
            break
        start <- x
    }
    x
}

## Nous pouvons ensuite écrire une nouvelle fonction 'sqrt'
## qui utilise 'fixed_point'. Nous y ajoutons un test de
## validité de l'argument, pour faire bonne mesure.
sqrt <- function(x)
{
    if (x < 0)
        stop("cannot compute square root of negative value")

    fixed_point(function(y) (y + x/y)/2, start = 1)
}

## Validation. Nous obtenons les mêmes résultats que
## précédemment.
sqrt(9)
sqrt(25)
sqrt(3047)

## Suppression de la fonction pour éviter qu'elle n'entre en
## conflit avec celle de R.
rm("sqrt")

## SYNDROME DE LA PLAQUE À BISCUITS

## La fonction ci-dessous calcule les 'nterm' premiers termes
## de la suite de Fibonacci. Elle souffre toutefois du
## Syndrome de la plaque à biscuits. (Identifiez pourquoi.)
fibonacci0 <- function(nterm)
{
    if (nterm < 1)
        stop("'nterm' doit être supérieur ou égal à 1")
    if (nterm == 1)
        return(0)
    x <- c(0, 1)
    for (i in seq_len(nterm - 2))
        x[i + 2] <- x[i + 1] + x[i]
    x
}

## Validation de la fonction
fibonacci0(1)
fibonacci0(2)
fibonacci0(5)

## Une seconde version de la fonction prend garde de d'abord
## créer un vecteur de la bonne longueur pour stocker tous les
## résultats, puis de le remplir graduellemen. (Le premier
## terme du vecteur est déjà 0 suite à l'initialisation avec
## 'numeric'.)
fibonacci <- function(nterm)
{
    if (nterm < 1)
        stop("'nterm' doit être supérieur ou égal à 1")
    if (nterm == 1)
        return(0)
    x <- numeric(nterm)
    x[2] <- 1
    for (i in seq_len(nterm - 2))
        x[i + 2] <- x[i + 1] + x[i]
    x
}

## Validation de la fonction
fibonacci(1)
fibonacci(2)
fibonacci(5)

## Avons-nous vraiment gagné en efficacité? En comparant le
## temps requis pour calculer plusieurs valeurs de la suite de
## Fibonacci pour chaque fonction, vous pourrez constater que
## la seconde version est entre trois et quatre fois plus
## rapide!
system.time(fibonacci0(1e6))
system.time(fibonacci(1e6))   #-*- `\labelline{tri:boucles:fin}`
@


\section{Algorithmes classiques}
\label{sec:tri:tri}

Pour l'étude des algorithmes classiques, je m'en remets à l'excellent
ouvrage \emph{Essential Algorithms} de
\citet{Stephens:algorithms:2013}. Rédigé dans un style clair et
direct, le manuscrit va juste assez loin pour nos besoins dans les
différentes notions, sans pour autant sacrifier les détails
importants. Bref, un juste équilibre entre «algorithmique pour les
nuls» et un livre plus théorique.

Je vous invite donc à étudier les chapitres suivants de \emph{Essential
Algorithms}:
\begin{itemize}
\item chapitre 6, pages 131--138, 145 (à partir de la section
  \emph{Quicksort})--148 et 156--160;
\item chapitre 7, pages 163--168;
\item chapitre 9, pages 185--193.
\end{itemize}

Quelques remarques pour vous aider dans votre lecture.
\begin{itemize}
\item Partout où vous lirez \emph{array}, pensez tout simplement à un
  vecteur dans R.
\item Tel que mentionné au chapitre~1 de
  \citet{Stephens:algorithms:2013}, l'auteur a pris le parti d'indicer
  les vecteurs comme dans plusieurs langages de programmation, soit de
  $0$ à $n - 1$ pour un vecteur de longueur $n$. Vous devrez adapter
  les algorithmes en conséquence pour la programmation en R où les
  vecteurs sont plutôt indicés de $1$ à $n$.
\item Le livre fait ici et là référence au concept de \emph{library}.
  Une bibliothèque (le nom en français) est une collection de
  fonctions ou de sous-programmes que l'on peut utiliser dans nos
  programmes. Certains langages de programmation sont constitués d'un
  noyau assez restreint auquel on ajoute plusieurs fonctionnalités
  standards (le tri ou la recherche, par exemple) par le biais de
  bibliothèques. C'est en partie le cas de R, mais le système de base
  contient déjà un grand nombre de fonctionnalités.
\end{itemize}


\section{Fonctions internes utiles}
\label{sec:tri:internes}

Le tri et la recherche sont des opérations de base dans l'analyse de
données. Il ne faut donc pas se surprendre que R comporte des
fonctions internes pour ces opérations.

\subsection{Tri et opérations apparentées}
\label{sec:tri:internes:tri}

\begin{ttscript}{unique}
\item[\Icode{sort}] \index{tri}tri en ordre croissant ou
  décroissant
<<echo=TRUE>>=
sort(c(4, -1, 2, 6))
@
\item[\Icode{rank}] \index{rang}rang des éléments d'un vecteur dans
  l'ordre croissant ou décroissant
<<echo=TRUE>>=
rank(c(4, -1, 2, 6))
@
\item[\Icode{order}] \index{ordre}ordre d'extraction des éléments d'un
  vecteur pour les placer en ordre croissant ou décroissant
<<echo=TRUE>>=
order(c(4, -1, 2, 6))
@
\item[\Icode{rev}] vecteur \index{renverser}renversé
<<echo=TRUE>>=
rev(1:10)
@
\item[\Icode{unique}] éléments uniques d'un vecteur
<<echo=TRUE>>=
unique(c(2, 4, 2, 5, 9, 5, 0))
@
\end{ttscript}

\videobox{\link{https://youtu.be/uC-zkzwsCVY}{Fonction \code{order}}}{%
  Visionnez la \link{https://youtu.be/uC-zkzwsCVY}{vidéo sur
    la fonction \icode{order}} qui explique plus en détails les
  différences entre les fonctions \icode{sort}, \icode{order} et \icode{rank}.}

\subsection{Recherche}
\label{sec:tri:internes:recherche}

Les exemples de cette sous-section utilisent le vecteur suivant.
<<echo=FALSE>>=
x <- c(4, -1, 2, -3, 6)
@
<<echo=TRUE>>=
x
@

\begin{ttscript}{which.max}
\item[\Icode{which}] positions des éléments satisfaisant la condition
  en argument
<<echo=TRUE>>=
which(x < 0)
@
\item[\Icode{which.min}] position du \index{minimum!position}minimum
<<echo=TRUE>>=
which.min(x)
@
\item[\Icode{which.max}] position du \index{maximum!position}maximum
<<echo=TRUE>>=
which.max(x)
@
\item[\Icode{match}] position de la première occurrence d'un élément
<<echo=TRUE>>=
match(2, x)
@
\item[\Icode{\%in\%}] appartenance d'une ou plusieurs valeurs au
  vecteur
<<echo=TRUE>>=
-1:2 %in% x
@
\end{ttscript}


\section{Exemples}
\label{sec:tri:exemples}

\scriptfile{\scriptfilename}
\lstinputlisting[firstline=\scriptfirstline]{\scriptfilename}


\section{Exercices}
\label{sec:tri:exercices}

\Opensolutionfile{solutions}[solutions-tri]

\begin{Filesave}{solutions}
\section*{Chapitre \ref*{chap:tri}}
\addcontentsline{toc}{section}{Chapitre \protect\ref*{chap:tri}}

Nous allons tester nos fonctions avec des vecteurs aléatoires obtenus
avec la fonction \Icode{sample} qui tire un échantillon aléatoire
parmi des valeurs avec ou sans remise:
\begin{Schunk}
\begin{Verbatim}
sample(x, size, replace = FALSE)
\end{Verbatim}
\end{Schunk}
\begin{itemize}
\item \code{x} est un vecteur parmi lequel sera tiré l'échantillon;
\item \code{size} est la taille de l'échantillon;
\item \code{replace} est une valeur booléenne qui indique si
  l'échantillonnage doit s'effectuer avec ou sans remise.
\end{itemize}

\begingroup
%% modifications locales au style des listings
\lstset{%
  frame=single,
  numbers=none,
  basicstyle=\normalfont\ttfamily\NoAutoSpacing}

\end{Filesave}

\noindent%
Réaliser les mises en œuvre ci-dessous avec R.

\begin{exercice}
  Effectuer une mise en œuvre de l'algorithme
  \index{insertionsort}\emph{insertionsort}.
  \begin{sol}
    L'algorithme \index{insertionsort}\emph{insertionsort} déplace
    successivement les valeurs du vecteur vers l'avant dans leur
    position en ordre croissant, comme on le ferait avec des cartes.
    L'algorithme requiert deux boucles: une pour passer par toutes les
    valeurs du vecteur et une autre pour déterminer à quel endroit,
    parmi les valeurs déjà triées, chaque valeur doit se retrouver.

    La fonction \icode{insertionsort} de la
    \autoref{fig:tri:insertionsort} constitue une mise en
    œuvre de l'algorithme en R. L'expression à l'intérieur de la
    clause \icode{if} repositionne les éléments du vecteur dans le bon
    ordre.

    \begin{figure}
      \lstinputlisting{include/insertionsort.R}
      \caption{Mise en œuvre en R de l'algorithme
        \emph{insertionsort}}
      \label{fig:tri:insertionsort}
    \end{figure}

<<echo=FALSE>>=
source("include/insertionsort.R")
@
<<echo=TRUE>>=
(x <- sample(0:10, 7, replace = TRUE))
insertionsort(x)
@
  \end{sol}
\end{exercice}

\begin{exercice}
  Effectuer une mise en œuvre de l'algorithme
  \index{selectionsort}\emph{selectionsort}.
  \begin{sol}
    L'algorithme \emph{selectionsort} déplace graduellement vers
    l'avant la plus petite valeur du vecteur, la deuxième plus petite
    valeur, et ainsi de suite. Deux boucles sont encore nécessaires:
    une pour passer à travers toutes les positions du vecteur et un
    autre pour, à chaque itération de la première boucle, trouver le
    minimum dans les valeurs restantes du vecteur.

    La fonction \icode{selectionsort} de la
    \autoref{fig:tri:selectionsort} constitue une mise en
    œuvre de l'algorithme en R. Dans la majorité des langages de
    programmation, l'échange de deux éléments d'un vecteur nécessite
    une variable tampon (temporaire), comme ceci:
    \begin{Schunk}
\begin{Verbatim}
tmp <- x[i]
x[i] <- x[j]
x[j] <- tmp
\end{Verbatim}
    \end{Schunk}
    Vous remarquerez comment l'échange est facile à faire en R
    simplement par indiçage.

    \begin{figure}
      \lstinputlisting{include/selectionsort.R}
      \caption{Mise en œuvre en R de l'algorithme \emph{selectionsort}}
      \label{fig:tri:selectionsort}
    \end{figure}

<<echo=FALSE>>=
source("include/selectionsort.R")
@
<<echo=TRUE>>=
(x <- sample(0:10, 7, replace = TRUE))
selectionsort(x)
@

    La fonction \icode{which.min} retourne l'indice du minimum
    dans un vecteur. Nous pouvons l'utiliser pour éliminer la
    seconde boucle dans la mise en œuvre de la
    \autoref{fig:tri:selectionsort}; voir la fonction de la
    \autoref{fig:tri:selectionsort-which}.

    \begin{figure}
      \lstinputlisting{include/selectionsort-which.R}
      \caption{Mise en œuvre en R de l'algorithme \emph{selectionsort}
        utilisant la fonction \code{which.min}}
      \label{fig:tri:selectionsort-which}
    \end{figure}

<<echo=FALSE>>=
source("include/selectionsort-which.R")
@
<<echo=TRUE>>=
(x <- sample(0:10, 7, replace = TRUE))
selectionsort(x)
@
  \end{sol}
\end{exercice}

\begin{exercice}
  Effectuer une mise en œuvre de l'algorithme
  \index{bubblesort}\emph{bubblesort}.
  \begin{sol}
    L'algorithme \emph{bubblesort} fait graduellement «remonter à la
    surface» les plus petites valeurs du vecteur. Il faut comparer
    deux valeurs adjacentes tant que le vecteur n'est pas trié. Par
    nature, l'algorithme requiert deux boucles: une pour comparer les
    valeurs deux à deux, et une autre pour continuer le travail tant
    que le vecteur n'est pas trié.

    Une première version de la mise en œuvre, à la
    \autoref{fig:tri:bubblesort-while}, colle de près à
    l'algorithme de \citet{Stephens:algorithms:2013}.

    \begin{figure}
      \lstinputlisting{include/bubblesort-while.R}
      \caption{Mise en œuvre en R de l'algorithme \emph{bubblesort}}
      \label{fig:tri:bubblesort-while}
    \end{figure}

<<echo=FALSE>>=
source("include/bubblesort-while.R")
@
<<echo=TRUE>>=
(x <- sample(0:10, 7, replace = TRUE))
bubblesort(x)
@

    Dans la version de \icode{bubblesort} de la
    \autoref{fig:tri:bubblesort-while}, il faut changer la
    variable indicatrice \code{not\_sorted} plusieurs fois, dont une pour
    s'assurer d'effectuer la boucle \code{while} au moins une fois.

    Une seconde mise œuvre, à la
    \autoref{fig:tri:bubblesort-repeat}, est rendue plus facile à
    suivre par l'utilisation d'une boucle \code{repeat}, qui est
    toujours exécutée au moins une fois. Au passage, j'inverse
    également le rôle de la variable indicatrice pour éviter
    les déroutantes doubles négations.

    \begin{figure}
      \lstinputlisting{include/bubblesort-repeat.R}
      \caption{Mise en œuvre en R de l'algorithme \emph{bubblesort}
        utilisant une boucle \code{repeat}}
      \label{fig:tri:bubblesort-repeat}
    \end{figure}

<<echo=FALSE>>=
source("include/bubblesort-repeat.R")
@
<<echo=TRUE>>=
(x <- sample(0:10, 7, replace = TRUE))
bubblesort(x)
@
  \end{sol}
\end{exercice}

\begin{exercice}
  Effectuer une mise en œuvre de l'algorithme
  \index{countingsort}\emph{countingsort}.
  \begin{sol}
    L'algorithme \emph{countingsort} compte le nombre d'occurrences de
    chaque valeur dans le vecteur pour ensuite les retourner dans le
    bon ordre et le bon nombre de fois.

    La mise en œuvre d'une fonction \icode{countingsort} à
    la \autoref{fig:tri:countingsort} utilise une boucle
    pour passer à travers toutes les valeurs du vecteur. Elle est un
    peu plus générale que l'algorithme de
    \citet{Stephens:algorithms:2013} dans la mesure où elle fonctionne
    pour des nombres entre \code{min} et \code{max} plutôt que
    uniquement entre 0 et \code{max}. La clé ici pour éviter certaines
    boucles de l'algorithme: la fonction \icode{rep} qui permet de
    répéter les valeurs d'un vecteur autant de fois que nécessaire.

    \begin{figure}
      \lstinputlisting{include/countingsort.R}
      \caption{Mise en œuvre en R de l'algorithme \emph{countingsort}}
      \label{fig:tri:countingsort}
    \end{figure}
    \enlargethispage{5mm}

<<echo=FALSE>>=
source("include/countingsort.R")
@
<<echo=TRUE>>=
(x <- sample(10:20, 100, replace = TRUE))
countingsort(x, 10, 20)
@

    La seconde mise en œuvre, ci-dessous, triche un peu: elle
    a recours à la fonction \icode{table} de R qui retourne justement le
    tableau de fréquence de chaque valeur d'un vecteur.
    Résultat: plus de boucle! Cela dit, c'est un exercice bien
    artificiel puisque \code{table} elle-même trie les données\dots
<<echo=TRUE>>=
countingsort <- function(x, min, max)
    rep(min:max, table(x))
(x <- sample(10:20, 100, replace = TRUE))
countingsort(x, 10, 20)
@
  \end{sol}
\end{exercice}

\begin{exercice}
  Effectuer une mise en œuvre de l'algorithme \emph{linear search}.
  \begin{sol}
    L'algorithme \emph{linear search} compare une à une les valeurs du
    vecteur à celle qui est recherchée. Ceci requiert une boucle.

    La fonction \icode{linsearch} présentée à la
    \autoref{fig:tri:linsearch} retourne \code{NA}
    plutôt que $-1$ lorsque la valeur n'est pas trouvée, comme c'est
    l'usage en R.

    \begin{figure}
      \lstinputlisting{include/linsearch.R}
      \caption{Mise en œuvre en R de l'algorithme
        \emph{linear search}}
      \label{fig:tri:linsearch}
    \end{figure}

<<echo=FALSE>>=
source("include/linsearch.R")
@
<<echo=TRUE>>=
x <- c(4, 5, 7, 9, 9, 11, 11, 12, 16, 19)
linsearch(7, x)
linsearch(10, x)
linsearch(21, x)
@
  \end{sol}
\end{exercice}

\begin{exercice}
  Effectuer une mise en œuvre récursive de l'algorithme
  \emph{linear search}.
  \begin{sol}
    En version récursive, l'algorithme de recherche linéaire revient à
    vérifier si la valeur courante du vecteur est la valeur recherchée
    et, sinon, à recommencer le même processus à partir de la valeur
    suivante du vecteur.

    Je propose deux mises en œuvre. La première, à la
    \autoref{fig:tri:rlinsearch}, a recours à une fonction
    auxiliaire qui garde le compte de la progression dans le vecteur.
    Les règles de portée lexicale de R
    (\autoref{sec:environnement:portee}) font en sorte que nous
    n'avons pas à passer les variables \code{x}, \code{target} et
    \code{xlen} à la fonction auxiliaire.

    \begin{figure}
      \lstinputlisting{include/rlinsearch.R}
      \caption{Mise en œuvre récursive en R de l'algorithme
        \emph{linear search}}
      \label{fig:tri:rlinsearch}
    \end{figure}

<<echo=FALSE>>=
source("include/rlinsearch.R")
@
<<echo=TRUE>>=
x <- c(4, 5, 7, 9, 9, 11, 11, 12, 16, 19)
rlinsearch(7, x)
rlinsearch(10, x)
rlinsearch(21, x)
@

    La seconde mise en œuvre, à la
    \autoref{fig:tri:rlinsearch-na} est un peu plus simple,
    mais, comme la position de la valeur recherchée dans le vecteur
    est calculée, elle repose sur le fait que tout calcul avec
    \code{NA} retourne \code{NA}, ce qui ne constitue sans doute pas
    du bon style\dots

    \begin{figure}
      \lstinputlisting{include/rlinsearch-na.R}
      \caption{Mise en œuvre récursive en R de l'algorithme
        \emph{linear search} utilisant une propriété de la valeur
        \code{NA}}
      \label{fig:tri:rlinsearch-na}
    \end{figure}

<<echo=FALSE>>=
source("include/rlinsearch-na.R")
@
<<echo=TRUE>>=
x <- c(4, 5, 7, 9, 9, 11, 11, 12, 16, 19)
rlinsearch(7, x)
rlinsearch(10, x)
rlinsearch(21, x)
@
  \end{sol}
\end{exercice}

\begin{exercice}
  Effectuer une mise en œuvre de l'algorithme \emph{binary search}.
  \begin{sol}
    L'algorithme \emph{binary search} coupe en deux l'intervalle dans
    lequel la valeur recherchée pourrait se trouver jusqu'à ce qu'il
    ne reste que la valeur recherchée ou un intervalle vide, auquel
    cas la valeur ne se trouve pas dans le vecteur.

    Attention à une chose: dans l'algorithme de
    \citet{Stephens:algorithms:2013}, il est spécifié que le résultat
    du calcul $\text{mid} = (\min + \max)/2$ doit être un entier
    (\emph{integer}). Dans R, nous pouvons obtenir ce résultat avec
    \icode{as.integer} ou, plus simplement, en calculant la partie
    entière du résultat avec \icode{floor}. C'est ce qu'utilise la
    fonction \icode{binsearch} de la
    \autoref{fig:tri:binsearch}.

    \begin{figure}
      \lstinputlisting{include/binsearch.R}
      \caption{Mise en œuvre en R de l'algorithme
        \emph{binary search}}
      \label{fig:tri:binsearch}
    \end{figure}

<<echo=FALSE>>=
source("include/binsearch.R")
@
<<echo=TRUE>>=
x <- c(4, 5, 7, 9, 9, 11, 11, 12, 16, 19)
binsearch(7, x)
binsearch(10, x)
binsearch(21, x)
@
  \end{sol}
\end{exercice}

\begin{exercice}
  Effectuer une mise en œuvre récursive de l'algorithme
  \emph{binary search}.
  \begin{sol}
    La mise en œuvre récursive la plus simple de l'algorithme
    \emph{binary search}, à la figure
    \autoref{fig:tri:rbinsearch}, utilise une fonction
    auxiliaire. Remarquez comment une fonction récursive (\code{fun}
    dans le cas présent) doit toujours --- normalement dès le départ
    --- contenir un critère d'arrêt des récursions. Autrement, le
    processus se répète à l'infini.

    \begin{figure}
      \lstinputlisting{include/rbinsearch.R}
      \caption{Mise en œuvre récursive en R de l'algorithme
        \emph{binary search}}
      \label{fig:tri:rbinsearch}
    \end{figure}

<<echo=FALSE>>=
source("include/rbinsearch.R")
@
<<echo=TRUE>>=
x <- c(4, 5, 7, 9, 9, 11, 11, 12, 16, 19)
rbinsearch(7, x)
rbinsearch(10, x)
rbinsearch(21, x)
@
  \end{sol}
\end{exercice}

\begin{exercice}
  Effectuer une mise en œuvre récursive de la fonction
  factorielle.
  \begin{sol}
    Voir la \autoref{fig:presentation:scheme_vs_s}.
<<echo=TRUE>>=
factorial(0)
factorial(1)
factorial(5)
@
  \end{sol}
\end{exercice}

\begin{exercice}
  Effectuer une mise en œuvre récursive de la suite de Fibonacci.
  \begin{sol}
    L'algorithme de base pour calculer un élément de la suite
    de Fibonnacci de manière récursive est très lent parce que
    plusieurs valeurs sont calculées à de multiples reprises.
<<echo=TRUE>>=
fibonacci <- function(n)
    if (n <= 1) n else fibonacci(n - 1) + fibonacci(n - 2)
fibonacci(0)
fibonacci(1)
fibonacci(2)
fibonacci(5)
fibonacci(10)
# fibonacci(30)              # déjà lent
# fibonacci(35)              # long
# fibonacci(40)              # à vos risques et périls
@
  \end{sol}
\end{exercice}

\begin{exercice}
  \label{ex:tri:100metres}
  On vous donne la liste et la date des 31 meilleurs temps enregistrés
  au 100~mètres homme entre 1964 et 2005.
<<echo=TRUE, eval=TRUE>>=
temps <- c(10.06, 10.03, 10.02,  9.95, 10.04, 10.07,
           10.08, 10.05,  9.98, 10.09, 10.01, 10.00,
            9.97,  9.93,  9.96,  9.99,  9.92,  9.94,
            9.90,  9.86,  9.88,  9.87,  9.85,  9.91,
            9.84,  9.89,  9.79,  9.80,  9.82,  9.78,
            9.77)
names(temps) <- c("1964-10-15", "1968-06-20",
    "1968-10-13", "1968-10-14", "1968-10-14",
    "1968-10-14", "1968-10-14", "1975-08-20",
    "1977-08-11", "1978-07-30", "1979-09-04",
    "1981-05-16", "1983-05-14", "1983-07-03",
    "1984-05-05", "1984-05-06", "1988-09-24",
    "1989-06-16", "1991-06-14", "1991-08-25",
    "1991-08-25", "1993-08-15", "1994-07-06",
    "1994-08-23", "1996-07-27", "1996-07-27",
    "1999-06-16", "1999-08-22", "2001-08-05",
    "2002-09-14", "2005-06-14")
@
<<echo=FALSE, eval=TRUE>>=
cat(temps, file = "100metres.data", labels = names(temps), fill = 1)
@
  Les données se trouvent dans le fichier
  \code{100metres.data} distribué avec ce document. Les dates se
  trouvent la première colonne du fichier et les temps, dans la
  seconde. La commande \icode{scan} utilisée avec l'argument
  \code{what = list("", 1)} permet d'importer ces données dans R.

  Extraire de ce vecteur les records du monde seulement, c'est-à-dire
  la première fois que chaque temps a été réalisé.
  \begin{sol}
    D'abord, recréons le vecteur des temps à partir des données du
    fichier \code{100metres.data}.
<<eval=TRUE>>=
x <- scan("100metres.data", what = list("", 1))
temps <- x[[2]]
names(temps) <- x[[1]]
@
    Ensuite, la clé pour obtenir les premiers records consiste à
    calculer les minimums cumulatifs avec \icode{cummin}. Une première
    expression retourne les temps, mais sans les dates.
<<eval=TRUE>>=
unique(cummin(temps))
@
    Nous pouvons récupérer les dates en retrouvant les records dans le
    vecteur.
<<eval=TRUE>>=
temps[match(unique(cummin(temps)), temps)]
@
  \end{sol}
\end{exercice}


\begin{exercice}
  Effectuer une mise en œuvre de l'algorithme \emph{Bucketsort} de
  \citet[chapitre~6]{Stephens:algorithms:2013} permettant de trier des
  entiers entre $1$ et $x_{\max}$. La fonction prend en argument le
  vecteur des données à trier, la valeur de $x_{\max}$ et le nombre de
  compartiments. Utiliser la fonction \icode{sort} pour trier les
  compartiments.

  \begin{sol}
    La principale difficulté réside dans le fait que certains
    compartiments peuvent demeurer vides (\code{NULL}). Or,
    \icode{sort} ne peut prendre \code{NULL} en argument. Il faut donc
    faire un test avant de trier les données.
<<echo=TRUE, eval=FALSE>>=
bucketsort <- function(x, max, nbuckets)
{
    ## création des compartiments
    buck <- vector("list", nbuckets)
    span <- max/nbuckets

    ## répartition des données dans les compartiments
    for (i in seq_along(x))
    {
        j <- ceiling(x[i]/span)
        buck[[j]] <- c(buck[[j]], x[i])
    }

    ## tri des données dans chaque compartiment; on
    ## effectue le tri seulement s'il y a des données
    ## dans le compartiment
    for (i in seq_len(nbuckets))
        if (!is.null(buck[[i]]))
            buck[[i]] <- sort(buck[[i]])

    ## retourner le vecteur trié
    unlist(buck)
}
@
  \end{sol}
\end{exercice}

\begin{Filesave}{solutions}
\endgroup                               % fin de \lstset local
\end{Filesave}

\Closesolutionfile{solutions}

%%% Local Variables:
%%% mode: noweb
%%% TeX-engine: xetex
%%% TeX-master: "programmer-avec-r"
%%% coding: utf-8
%%% End:
