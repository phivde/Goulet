%%% Copyright (C) 2019 Vincent Goulet
%%%
%%% Ce fichier fait partie du projet
%%% «Programmer avec R»
%%% https://gitlab.com/vigou3/programmer-avec-r
%%%
%%% Cette création est mise à disposition sous licence
%%% Attribution-Partage dans les mêmes conditions 4.0
%%% International de Creative Commons.
%%% https://creativecommons.org/licenses/by-sa/4.0/

\chapter{Bonnes pratiques de la programmation}
\label{chap:pratiques}

\def\scriptfilename{\currfilebase.R}
\SweaveOpts{echo=FALSE}

<<echo=FALSE, results=hide>>=
source(".Sweaveprofile")   # configuration
source("Stangle.R")        # lancement de Stangle
@
<<script>>=
## Copyright (C) 2019 Vincent Goulet
##
## Ce fichier fait partie du projet
## «Programmer avec R»
## https://gitlab.com/vigou3/programmer-avec-r
##
## Cette création est mise à disposition sous licence
## Attribution-Partage dans les mêmes conditions 4.0
## International de Creative Commons.
## https://creativecommons.org/licenses/by-sa/4.0/
@

\begin{objectifs}
\item Définir une fonction R, ses divers arguments et, le cas échéant,
  les valeurs par défaut de ceux-ci.
\item Utiliser et définir des fonctions R ayant un nombre variable
  d'arguments.
\item Utiliser la fonction \code{if} pour l’exécution conditionnelle
  d'expressions R.
\item Distinguer la construction \code{if ... else ...} de la fonction
  \code{ifelse}.
\item Concevoir une boucle dans R.
\item Choisir entre les opérateurs \code{for}, \code{while} et
  \code{repeat} lors de la construction d'une boucle R.
\item Employer les normes de programmation reconnues en matière de
  segmentation du code, de style et de documentation.
\end{objectifs}

De manière générale, le développement et la maintenance de code
informatique repose sur la contribution de plusieurs personnes. En
effet, il est plutôt rare, dans le milieu professionnel, d'être appelé
à concevoir un programme informatique à partir d'une page blanche et
en complète autarcie, c'est-à-dire sans que quiconque n'ait à
interagir avec le code à un stade ou à un autre. Une grande part du
travail de programmation consiste à corriger, à mettre à jour ou à
améliorer du code existant. Dans ce contexte, l'adhésion à un certain
nombre de normes et de bonnes pratiques permet de faciliter le travail
de tous les intervenants et de réduire les risques d'erreurs. Cette
section présente quelques unes de ces bonnes pratiques à adopter en
matière de style de programmation, de présentation du code et de
documentation.

\tipbox{Je me suis efforcé de respecter les bonnes pratiques
  ci-dessous dans le code informatique des sections d'exemples. Prêtez
  donc attention à la manière dont le code qui vous est fourni est
  construit et présenté.}

\subsection{Style}
\label{sec:pratiques:style}

Il en va du code informatique comme de la prose: si le style peut
varier d'un auteur à l'autre, l'œuvre doit toujours être à la fois
agréable à lire et facile à comprendre. Bref, les meilleurs
programmeurs préfèrent la \emph{lisibilité} de leur code aux effets de
style qui auraient pour seul mérite de faire étalage de leur maitrise
du langage.

Tout programmeur devrait constamment garder en tête les trois
objectifs suivants en effectuant son travail: simplicité, clarté,
concision. Ces objectifs entrent souvent en conflit les uns avec les
autres! Tout l'art de la bonne programmation consiste donc à trouver
un juste équilibre entre les trois pôles.

\citet{Kernighan:practice:1999},
\citet{Oualline:C:1997,Oualline:C++:2003},
\citet{Kernighan:style:1978} proposent d'excellents chapitres sur le
style en programmation. Je ne saurais être aussi exhaustif que ces
auteurs établis. Néanmoins, je vous incite à porter une attention
particulière aux quelques points de style livrés en vrac, ci-dessous.

\begin{itemize}
\item Utilisez des noms de variables significatifs. Ne soyez pas ce
  collègue qui nomme les variables d'un programme \code{x}, \code{xx}
  et \code{xxx} (cas vécu). Attention, toutefois, de ne pas pousser le
  concept trop loin. Ici comme ailleurs, la clarté peut provenir de la
  concision; la terminologie\footnote{%
    Vous remarquerez que je préfère utiliser l'anglais pour les
    noms d'objets, question d'uniformité avec les identificateurs du
    langage. Chose certaine, évitez à tout prix les accents dans les
    noms d'objets.}
  \begin{Schunk}
\begin{Verbatim}
xlen <- length(x)
\end{Verbatim}
  \end{Schunk}
  est aussi claire que
  \begin{Schunk}
\begin{Verbatim}
length_of_x <- length(x)
\end{Verbatim}
  \end{Schunk}
  et bien plus simple à utiliser au fil d'un programme.

  Certains noms d'objets sans réelle signification sont tellement
  usuels qu'il est contre productif de leur préférer des versions plus
  explicites. Pensons, ici, à \code{x} comme premier argument d'une
  fonction R ou à \code{i}, \code{j} et \code{k} comme compteurs dans
  les boucles \icode{for}.

  Quant à la composition des noms d'objets formés de plusieurs mots,
  divers styles s'affrontent: \code{variable.name},
  \code{variable\_name}, \code{variableName}, \code{VariableName},
  etc. Assurez-vous simplement de suivre le standard en vigueur dans
  votre équipe de travail, et, par-dessus tout, soyez constant. Ma
  préférence, qui concorde avec une grande partie du code source de R,
  va aux noms d'objets courts et entièrement en minuscules.
  %
\item Dès qu'elles sont disponibles, utilisez les fonctions internes
  de R au lieu de reprogrammer certaines procédures. Non seulement
  bénéficierez-vous de l'optimisation des fonctions internes, mais
  votre code gagnera également en lisibilité. Comparez
  \begin{Schunk}
\begin{Verbatim}
sum(x)/length(x)
\end{Verbatim}
  \end{Schunk}
  à
  \begin{Schunk}
\begin{Verbatim}
mean(x)
\end{Verbatim}
  \end{Schunk}
  %
\item Connaitre sur le bout des doigts la priorité des opérateurs du
  \autoref{tab:premiers:operateurs}, c'est bien; rendre explicite l'ordre
  des opérations dans une expression à l'aide de parenthèses, c'est
  mieux. N'hésitez pas à utiliser des parenthèses dès que l'ombre d'un
  doute pourrait planer sur l'ordre des opérations. D'ailleurs, à ce
  propos, \citet{Oualline:C:1997} ramène la quinzaine de règles de
  priorité des opérations (du langage C) à seulement deux:
  \begin{enumerate}
  \item la multiplication et la division précèdent l'addition et la
    soustraction;
  \item placer tout le reste entre parenthèses.
  \end{enumerate}
  %
\item Évitez les expressions logiques complexes, surtout celles
  reposant sur la double négation. Par exemple, pour exécuter une
  expression si un vecteur contient des données manquantes, la
  condition
  \begin{Schunk}
\begin{Verbatim}
if (any(is.na(x)))
\end{Verbatim}
  \end{Schunk}
  est beaucoup plus facile à déchiffrer que la version équivalente
  d'un point de vue logique
  \begin{Schunk}
\begin{Verbatim}
if (!all(!is.na(x)))
\end{Verbatim}
  \end{Schunk}
  En revanche, s'il s'agit plutôt d'exécuter une expression quand un
  vecteur ne contient aucune donnée manquante, alors
  \begin{Schunk}
\begin{Verbatim}
if (all(!is.na(x)))
\end{Verbatim}
  \end{Schunk}
  est plus simple que
  \begin{Schunk}
\begin{Verbatim}
if (!any(is.na(x)))
\end{Verbatim}
  \end{Schunk}

  De plus, le conseil précédent sur la priorité des opérations est
  particulièrement indiqué avec les opérations logiques. Sauriez-vous
  confirmer, sans consulter le \autoref{tab:premiers:operateurs}, l'ordre
  des opérations dans l'expression logique suivante?\footnote{%
    C'est \code{(!p) | (q \& r)}.}
  \begin{Schunk}
\begin{Verbatim}
!p | q & r
\end{Verbatim}
  \end{Schunk}
  %
\item Lorsque vous les connaitrez, utilisez les fonctions
  d'application (\autoref{chap:application}) plutôt que des boucles
  explicites. Une expression ayant recours à une fonction
  d'application est plus concise et plus simple à décoder. Comparez
  \begin{Schunk}
\begin{Verbatim}
z <- numeric(n)
for (i in seq_len(n))
    z[i] <- mean(x[[i]])
\end{Verbatim}
  \end{Schunk}
  et
  \begin{Schunk}
\begin{Verbatim}
z <- sapply(x, mean)
\end{Verbatim}
  \end{Schunk}

  Encore ici, évitez de pousser la logique trop loin. Si une boucle
  est plus naturelle et plus simple à comprendre qu'une fonction
  d'application, optez pour la boucle. En particulier, une
  fonction d'application \icode{sapply} à l'intérieur d'une autre
  fonction \code{sapply}, ce n'est généralement ni plus efficace, ni
  plus simple à déchiffrer qu'une double boucle \icode{for}.
  %
\item Adoptez la
  \link{https://fr.wikipedia.org/wiki/Philosophie_d\%27Unix}{philosophie
    Unix}, notamment le précepte qui appelle à créer des programmes
  qui effectuent une seule chose et qui le font bien. Lorsqu'une
  fonction devient «longue» --- cela dépend du contexte, mais
  généralement dès une vingtaine de lignes en R --- il convient de la
  scinder en plusieurs blocs logiques.
  %
\item Enfin, utilisez \icode{return} uniquement pour provoquer la
  sortie anticipée d'une fonction, habituellement à l'intérieur d'une
  clause \code{if}. En d'autres termes, en R \code{return} n'a pas sa
  place à la toute fin d'une fonction.
\end{itemize}

\subsection{Présentation du code}
\label{sec:pratiques:presentation}

Le code bien mis en forme est plus facile et agréable à consulter. Il
existe plusieurs chapelles dans le monde des programmeurs quant à la
«bonne façon» de présenter et, surtout, d'indenter le code
informatique.

Voyons d'abord ce qui rallie tout le monde.

En premier lieu, veillez à limiter la longueur des lignes de code à
environ 80 caractères. Ce standard remonte à l'époque des terminaux en
format texte qui ne pouvaient afficher de l'information que sur 80
colonnes. Pourquoi s'y tenir encore aujourd'hui, alors que nos écrans
d'ordinateur sont très larges? Parce que les longues lignes de texte
sont difficiles à suivre, notre œil ayant tendance à sauter à la ligne
inférieure en se déplaçant de la gauche vers la droite\footnote{%
  C'est pourquoi les journaux et les magazines sont composés en
  colonnes de texte étroites.}. %
Profitez donc plutôt de l'espace horizontal à l'écran pour afficher
des fenêtres côte-à-côte.

Si de multiples niveaux d'indentation (voir plus bas) font en sorte
qu'il manque de place à droite pour écrire du code, le problème n'est
peut-être pas tant la limite sur la longueur des lignes que la
conception même du programme. Simplifiez l'algorithme ou scindez le
programme en plusieurs fonctions.

Ensuite, aérez le code avec des lignes blanches entre les blocs
logiques et, surtout, avec des espaces. Les espaces en programmation
jouent le même rôle que dans du texte normal: elles facilitent la
lecture. En particulier, utilisez des espaces dans les circonstances
suivantes:
\begin{itemize}
\item de part et d'autre du symbole d'affectation \icode{<-}; ces
  espaces sont ajoutées automatiquement avec les raccourcis clavier
  des éditeurs spécialisés GNU~Emacs\index{Emacs}
  (\autoref{sec:emacs+ess:commandes:script}) et \index{RStudio}RStudio
  (\autoref{sec:rstudio:commandes});
\item de part et d'autre de tous les opérateurs\footnote{%
    Sauf peut-être la division: je préfère \code{(x + y)/z} à \code{(x
      + y) / z}.};
\item après les virgules;
\item avant la parenthèse ouvrante \code{(}, sauf dans les appels de
  fonction.
\end{itemize}
Comparez les deux blocs de code de la
\autoref{fig:collaboration:espaces}. Vous serez sans doute d'accord
que celui qui respecte les indications ci-dessus s'avère bien plus
lisible.

\begin{figure}
  \begin{minipage}{0.48\linewidth}
\begin{Verbatim}[frame=single]
f<-function(x,y)
{
    if(y<0)
        y<--y
    x*(1+x*y)^2
}
\end{Verbatim}
  \end{minipage}
  \hfill
  \begin{minipage}{0.48\linewidth}
\begin{Verbatim}[frame=single]
f <- function(x, y)
{
    if (y < 0)
        y <- -y
    x * (1 + x * y)^2
}
\end{Verbatim}
  \end{minipage}
  \caption[Blocs de code sans et avec les espaces appropriées]{Blocs
    de code sans (à gauche) et avec (à droite) les espaces
    appropriées. Le code de droite est plus lisible.}
  \label{fig:collaboration:espaces}
\end{figure}

Passons maintenant au dossier chaud parmi les programmeurs:
\index{indentation}l'indentation du code et la position des accolades.
Tous s'entendent au moins sur un point: il est absolument essentiel
d'indenter les blocs de code pour mettre la structure d'un programme
en évidence. En clair, cela signifie que toute expression --- ou
groupe d'expressions entre accolades --- doit être placée en retrait de
la marge de gauche dès lors qu'elle fait partie d'une structure de
contrôle ou de la définition d'une fonction. Le code de la
\autoref{fig:collaboration:espaces} est correctement indenté.

\importantbox{Ne pas du tout indenter son code est passible de la
  peine capitale, d'excommunication, de bannissement de la Terre du
  Milieu\dots\ choisissez votre châtiment.}

La source des insolubles débats se situe, comme souvent, dans les
détails: le nombre d'espaces dont il convient d'indenter le code et la
position des accolades, surtout l'accolade ouvrante. À titre
d'exemples, l'éditeur GNU~Emacs\index{Emacs} reconnaît et supporte au
moins les styles d'indentation suivants:

\vspace{\topsep}\noindent
\begin{minipage}{\linewidth}
  \begin{minipage}[t]{0.48\linewidth}
    C++
    \begin{Schunk}
\begin{Verbatim}
for (i in 1:10)
{
    expression
}
\end{Verbatim}
    \end{Schunk}
  \end{minipage}
  \hfill
  \begin{minipage}[t]{0.48\linewidth}
    K\&R (1TBS\footnotemark)
    \begin{Schunk}
\begin{Verbatim}
for (i in 1:10){
     expression
}
\end{Verbatim}
    \end{Schunk}
  \end{minipage}
\end{minipage}
\footnotetext{\emph{One True Bracing Style}. C'est dire
  combien les amateurs de ce style le tiennent en haute estime.}

\vspace{\topsep}\noindent
\begin{minipage}{\linewidth}
  \begin{minipage}[t]{0.48\linewidth}
    Whitesmith
    \begin{Schunk}
\begin{Verbatim}
for (i in 1:10)
     {
     expression
     }
\end{Verbatim}
    \end{Schunk}
  \end{minipage}
  \hfill
  \begin{minipage}[t]{0.48\linewidth}
    GNU
    \begin{Schunk}
\begin{Verbatim}
for (i in 1:10)
  {
    expression
  }
\end{Verbatim}
    \end{Schunk}
  \end{minipage}
\end{minipage}
\vspace{\topsep}

Le code source de R est entièrement composé dans un style analogue aux
style C++, ci-dessus, ou RRR du \index{Emacs!mode ESS}mode ESS de Emacs:
\begin{itemize}
\item le code est indenté de quatre (4) espaces;
\item les accolades ouvrante et fermante sont placées sur leurs
  propres lignes.
\end{itemize}
Ce style peut être  considéré comme standard pour la programmation en
R.

En définitive, le style d'indentation utilisé n'a pas tellement
d'importance. Ce qui compte, c'est de se conformer au style en vigueur
dans son domaine et de demeurer constant au fil de son code.

\tipbox{Les bons éditeurs pour programmeurs permettent de configurer
  le niveau d'indentation. Consultez la documentation de votre
  éditeur.}

\subsection{Commentaires}
\label{sec:pratiques:commentaires}

Les \index{commentaires}commentaires dans le code servent à guider le
lecteur --- peut-être vous-même, quelque temps après la rédaction ---
dans la lecture d'un programme. Le niveau de détails que devraient
comporter les commentaires fait, comme le style d'indentation, l'objet
de vifs débats.

Certains affirment qu'un bon programme se passe d'explications et que,
par conséquent, les commentaires sont en grande partie inutiles. Or,
comme le mentionne \citet{Oualline:C:1997}, un programme sans
commentaires constitue une bombe en attente d'exploser. Un jour ou
l'autre, quelqu'un devra modifier ledit programme et l'absence de
commentaires rendra la tâche beaucoup plus ardue que nécessaire.

À l'autre bout du spectre, on trouve les tenants du tout, tout
commenter, jusqu'à l'évidence.
\begin{Schunk}
\begin{Verbatim}
## calculer la somme de x
z <- sum(x)
\end{Verbatim}
\end{Schunk}
Cette pratique s'avère plus souvent qu'autrement contre productive:
non seulement force-t-elle le programmeur à passer du temps à rédiger
des commentaires sans véritable utilité, mais elle surcharge également
le code, le rendant de ce fait plus difficile à lire.

Comme bien des choses en ce monde, la meilleure solution se trouve
dans le juste milieu: commentez ni trop, ni trop peu. Les quelques
préceptes suivants, dont certains sont tirés de
\citet{Kernighan:practice:1999}, devraient vous aider à trouver un
juste équilibre.

\begin{itemize}
\item Documentez non pas ce que \emph{fait} le programme, mais
  \emph{pourquoi} il le fait. Lire qu'un bloc de code effectue tel
  calcul s'avère de peu de secours si l'on ne sait pas dans quel but
  le calcul est effectué.
\item N'enfoncez pas de portes ouvertes. Indiquer que l'expression
  \code{i <- i + 1} incrémente le compteur \code{i} n'est pas utile.
  Les commentaires doivent fournir de l'information qui ne saute pas
  aux yeux ou qui se trouve éparpillée dans le code.
\item Définissez ce que fait chaque fonction, la nature de ses
  arguments et la valeur retournée. Si une fonction R fait partie d'un
  paquetage, vous devrez nécessairement placer ces informations dans
  l'obligatoire rubrique d'aide de la fonction. Autrement, placez ces
  informations en commentaires avant la définition de la fonction.
  Vous devriez pouvoir expliquer ce que fait une fonction en une
  phrase.
\item Éclairez les zones d'ombre, ne les rendez pas plus opaques. Des
  commentaires confus, imprécis ou qui entrent carrément en
  contradiction avec le code nuisent davantage qu'ils n'aident. Soyez
  concis et gardez toujours à l'esprit de fournir au lecteur des
  informations justes et pertinentes.
\item Ne documentez pas du mauvais code, réécrivez-le. Si les
  commentaires sont beaucoup plus longs que le code auxquels ils se
  rapportent, c'est probablement qu'il est temps de réviser le code.
\end{itemize}

À moins qu'une rubrique d'aide en bonne et due forme n'accompagne une
fonction, sa définition devrait toujours être précédée d'un bloc de
commentaires contenant au minimum:
\begin{enumerate}
\item la \index{signature}\emph{signature} de la fonction (son nom
  suivi, entre parenthèses, de tous les arguments avec leur valeur par
  défaut, le cas échéant);
\item une courte description de ce que fait la fonction (en mode
  infinitif, de manière à compléter la phrase «Cette fonction permet
  de\dots»);
\item la liste des arguments, de leur signification et des valeurs
  admissibles;
\item la valeur retournée par la fonction.
\end{enumerate}
Il s'agit de la structure générale des rubriques d'aide de R. La
\autoref{fig:fonctions:doc} fournit un exemple de documentation pour
une fonction simple.

\tipbox{Le fichier \code{gabarit-documentation-fonction.R} livré avec
  le présent document contient un gabarit que vous pouvez utiliser
  pour insérer rapidement dans vos fichiers de script la structure de
  base de la documentation d'une fonction.}

\begin{figure}
\begin{Verbatim}[frame=single]
###
### square(x)
###
##  Éléver au carré.
##
##  Arguments
##
##  x: vecteur de nombres réels.
##
##  Valeur
##
##  Vecteur de nombres réels contenant les carrés
##  des arguments.
##
square <- function(x) x * x
\end{Verbatim}
  \caption{Exemple de documentation pour une fonction simple}
  \label{fig:fonctions:doc}
\end{figure}

Dans R, le symbole numéro \code{\#} --- ou carré --- marque le début
d'un commentaire, et ce, peu importe où le symbole se trouve sur la
ligne. Il est possible de combiner les \code{\#} pour développer une
forme de hiérarchie dans les commentaires ou pour délimiter
différentes sections d'un fichier de script. Pour les fichiers
d'exemples du présent document, j'ai utilisé la
\link{https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html}{%
  convention de l'éditeur \index{Emacs}GNU~Emacs}.
\begin{itemize}
\item Les commentaires qui débutent par trois carrés, «\code{\#\#\#}»,
  sont toujours alignés sur la marge de gauche. Ils ne sont utilisés
  qu'à l'extérieur des fonctions. Ils marquent soit des sections, soit
  des entêtes de fonctions.
\item Les commentaires qui débutent par deux carrés, «\code{\#\#}»,
  sont alignés sur le niveau d'indentation courant. Lorsqu'ils
  apparaissent à l'intérieur d'une fonction, ils décrivent le rôle du
  bloc de code qui suit ou l'état de la fonction à ce stade. À
  l'extérieur des fonctions, ils marquent des sous-sections du code
  source.
\item Les commentaires qui débutent par un seul carré, «\code{\#}»,
  sont alignés sur une colonne à droite du code source. Ils servent à
  clarifier, \emph{très succinctement}, ce qu'effectue une ligne de
  code.
\end{itemize}

L'éditeur \index{RStudio}RStudio, de son côté, utilise par défaut les
niveaux de titres du langage de balisage
\link{https://daringfireball.net/projects/markdown/syntax}{Markdown},
dont la hiérarchie est exactement l'inverse de celle de Emacs. Ainsi,
les commentaires de premier niveau sont ceux qui débutent par un seul
carré, \code{\#}; les commentaires de deuxième niveau débutent par
deux carrés, \code{\#\#}, etc.

\gotorbox{Le fichier de script \code{\scriptfilename} reproduit à la
  \autoref{sec:fonctions:exemples} contient, aux lignes
  \reflines{fonctions:pratiques}, un long exemple d'amélioration du
  style et de la présentation du code d'une fonction, ainsi qu'un
  exemple de documentation d'une fonction. Vous y trouverez même un
  cas de Syndrome de la plaque à biscuits{\texttrademark}.}

<<script, results=hide>>=
## Afin d'illustrer l'utilité de bien présenter et de
## commenter le code, nous allons prendre une fonction dans un
## état assez pitoyable et l'améliorer graduellement.
##
## La fonction 'rgamma_ar' sert à générer des nombres
## aléatoires de la distribution gamma dont le paramètre de
## forme se trouve dans l'intervalle (0, 1) par la méthode de
## simulation dite d'«acceptation-rejet».
##
## L'algorithme de simulation d'un nombre 'x' issu d'une
## distribution Gamma(a, 1), 0 < a < 1, est le suivant:
##
## 1. Simuler u, v d'une distribution U(0, 1).
## 2. Calculer y = G^{-1}(u), où
##
##      G^{-1}(x) = ((a + e)/e * x)^(1/a),
##                            si 0 <= x <= e/(a + e)
##                = - log(((1/a) + (1/e)) * (1 - x),
##                            si e/(a + e) < x <= 1.
## 3. Si
##
##      v <= exp(-y),    si 0 <= y <= 1
##        <= y^(a - 1),  si y > 1,
##
##    alors retourner x = y. Sinon retourner à l'étape 1.

### PRÉSENTATION DU CODE

## La première version du code ne respecte pas les règles de
## base d'indentation et d'«aération» du code. Résultat: un
## fouillis difficile à consulter.
##-!- rgamma_ar<-function(n,shape,rate=1,scale=1/rate)
##-!- { if(shape<=0|shape>=1)
##-!- stop("valeur de shape inadmissible")
##-!-   ratio<-function(x)
##-!-      if(x<=1) exp(-x)else x^(shape-1)
##-!- Ginv<-function(x) {
##-!-   k<-1+shape*exp(-1)
##-!-   if(x<=1/k) (k*x)^(1/shape)
##-!-   else -log(((1/shape)+exp(-1))*(1-x))   }
##-!-
##-!-   i<-0
##-!-   while(i<n) {
##-!-     y<-Ginv(runif(1))
##-!-     if(runif(1)<=ratio(y))
##-!-     {x<-c(x,y)
##-!-         i<-i+1
##-!-  }
##-!- x*scale
##-!- }

## Réviser seulement l'indentation permet déjà d'y voir plus
## clair. Tous les bons éditeurs de texte pour programmeurs
## sont capables d'indenter le code pour vous, que ce soit à
## la volée ou de manière asynchrone.
##
## Vous pouvez arriver au résultat ci-dessous avec RStudio en
## sélectionnant le code ci-dessus et en exécutant l'option du
## menu Code|Reindent Lines.
##
## Dans Emacs, l'indentation se fait automatiquement au fur et
## à mesure que l'on entre du code ou, autrement, en appuyant
## sur la touche de tabulation.
##-!- rgamma_ar<-function(n,shape,rate=1,scale=1/rate)
##-!- {
##-!-     if(shape<=0|shape>=1)
##-!-         stop("valeur de shape inadmissible")
##-!-     ratio<-function(x)
##-!-         if(x<=1) exp(-x)else x^(shape-1)
##-!-     Ginv<-function(x)
##-!-     {
##-!-         k<-1+shape*exp(-1)
##-!-         if(x<=1/k)
##-!-             (k*x)^(1/shape)
##-!-         else
##-!-             -log(((1/shape)+exp(-1))*(1-x))
##-!-     }
##-!-
##-!-     i<-0
##-!-     while(i<n)
##-!-     {
##-!-         y<-Ginv(runif(1))
##-!-         if(runif(1)<=ratio(y))
##-!-         {
##-!-             x<-c(x,y)
##-!-             i<-i+1
##-!-         }
##-!-         x*scale
##-!-     }

## La simple indentation du code nous permet déjà de découvrir
## un bogue dans le code: il manque une accolade fermante } à
## la fin de la fonction.
##
## En examinant le code de plus près, nous réalisons que
## l'expression 'x * scale', qui sert à retourner le résultat
## de la fonction, devrait se trouver à l'extérieur de la
## boucle 'while'. En fait, l'accolade fermante manquante est
## celle qui termine la clause 'if' à l'intérieur de la boucle.
##
## Corrigeons déjà le code.
rgamma_ar<-function(n,shape,rate=1,scale=1/rate)
{
    if(shape<=0|shape>=1)
        stop("valeur de shape inadmissible")
    ratio<-function(x)
        if(x<=1) exp(-x)else x^(shape-1)
    Ginv<-function(x)
    {
        k<-1+shape*exp(-1)
        if(x<=1/k)
            (k*x)^(1/shape)
        else
            -log(((1/shape)+exp(-1))*(1-x))
    }

    i<-0
    while(i<n)
    {
        y<-Ginv(runif(1))
        if(runif(1)<=ratio(y))
        {
            x<-c(x,y)
            i<-i+1
        }
    }
    x*scale
}

## Les normes usuelles de présentation du code informatique
## exigent également d'aérer le code avec des espaces autour
## des opérateurs et des structures de contrôle, après les
## virgules, etc. Comme pour du texte normal, les espaces
## rendent le code plus facile à lire.
##
## Dans RStudio, vous pouvez parvenir à la présentation
## ci-dessous avec la commande du menu Code|Reformat Code.
rgamma_ar <- function(n, shape, rate = 1, scale = 1/rate)
{
    if (shape <= 0 | shape >= 1)
        stop("valeur de shape inadmissible")

    ratio <- function(x)
        if (x <= 1) exp(-x) else x^(shape - 1)

    Ginv <- function(x)
    {
        k <- 1 + shape * exp(-1)
        if (x <= 1/k)
            (k * x)^(1/shape)
        else
            -log(((1/shape) + exp(-1)) * (1 - x))
    }

    i <- 0
    while (i < n)
    {
        y <- Ginv(runif(1))
        if (runif(1) <= ratio(y))
        {
            x <- c(x, y)
            i <- i + 1
        }
    }
    x * scale
}

### STYLE

## Il y a quelque chose à redire sur le style de cette
## fonction? Pourtant, les noms d'objets sont raisonnables, le
## coeur de la fonction n'est pas inutilement placé dans une
## clause 'else' après le test de validité de l'argument
## 'shape', deux calculs plus lourds sont relégués à des
## fonctions internes...
##
## Si vous y regardez de très près, vous constaterez que la
## fonction ci-dessus souffre du Syndrome de la plaque à
## biscuits(TM).
##
## En effet, les valeurs acceptées dans la simulation sont
## placées à la suite du vecteur 'x' dans l'expression 'x <-
## c(x, y)', le faisant constamment croître.
##
## Pour régler ce problème, il faut définir un contenant et y
## placer les valeurs simulées au fur et à mesure qu'elles
## sont acceptées.
##
## Nous en profitons pour combiner les opérations, assez
## communes, d'affectation et d'incrémentation du compteur.
rgamma_ar <- function(n, shape, rate = 1, scale = 1/rate)
{
    if (shape <= 0 | shape >= 1)
        stop("valeur de shape inadmissible")

    ratio <- function(x)
        if (x <= 1) exp(-x) else x^(shape - 1)

    Ginv <- function(x)
    {
        k <- 1 + shape * exp(-1)
        if (x <= 1/k)
            (k * x)^(1/shape)
        else
            -log(((1/shape) + exp(-1)) * (1 - x))
    }

    x <- numeric(n)
    i <- 0
    while (i < n)
    {
        y <- Ginv(runif(1))
        if (runif(1) <= ratio(y))
            x[i <- i + 1] <- y
    }
    x * scale
}

### COMMENTAIRES

## Dernier élément manquant dans notre code: les commentaires.
##
## Vous trouverez ci-dessous un modèle de documentation du
## code inspiré de la struture des rubriques d'aide de R.

###
### rgamma_ar(n, shape, rate = 1, scale = 1/rate)
###
##  Simule des observations de la distribution gamma avec
##  paramètre de forme entre 0 et 1 par la méthode
##  d'acceptation-rejet.
##
##  Arguments
##
##  n: nombre d'observations à simuler;
##  shape: paramètre de forme de la distribution;
##    0 < shape < 1;
##  rate: autre façon de spécifier l'échelle de la
##    distribution;
##  scale: paramètre d'échelle de la distribution (strictement
##    positif).
##
##  Valeur
##
##  Vecteur d'observations d'une distribution gamma.
##
rgamma_ar <- function(n, shape, rate = 1, scale = 1/rate)
{
    ## Vérification de la validité de 'shape'
    if (shape <= 0 | shape >= 1)
        stop("valeur de shape inadmissible")

    ## Fonction pour calculer la valeur du ratio f(x)/(c g(x))
    ## utilisé dans le test d'acceptation-rejet.
    ratio <- function(x)
        if (x <= 1) exp(-x) else x^(shape - 1)

    ## Fonction pour générer une valeur y à partir d'un nombre
    ## uniforme u.
    Ginv <- function(x)
    {
        k <- 1 + shape * exp(-1)
        if (x <= 1/k)
            (k * x)^(1/shape)
        else
            -log(((1/shape) + exp(-1)) * (1 - x))
    }

    ## La méthode d'acceptation-rejet commande d'utiliser une
    ## boucle 'while' puisque nous ne savons pas d'avance
    ## combien de valeurs simulées seront acceptées.
    x <- numeric(n)  # contenant pour les valeurs simulées
    i <- 0           # compteur du nombre de valeurs acceptées
    while (i < n)
    {
        y <- Ginv(runif(1))
        if (runif(1) <= ratio(y))
            x[i <- i + 1] <- y
    }

    ## Les valeurs dans 'x' proviennent d'une distribution
    ## Gamma(shape, 1). Il faut les retourner sur la bonne
    ## échelle.
    x * scale
}                                       #-*- `\labelline{fonctions:pratiques:fin}`
@


\section{Exemples}
\label{sec:fonctions:exemples}

\scriptfile{\scriptfilename}
\lstinputlisting[firstline=\scriptfirstline]{\scriptfilename}


\section{Exercices}
\label{sec:fonctions:exercices}

\Opensolutionfile{solutions}[solutions-fonctions]

\begin{Filesave}{solutions}
\section*{Chapitre \ref*{chap:fonctions}}
\addcontentsline{toc}{section}{Chapitre \protect\ref*{chap:fonctions}}

\end{Filesave}

\begin{exercice}
  Pour chacun des exercices b)--g) de
  l'\autoref{ex:premiers:moyennes}, composer une fonction R pour
  effectuer le calcul demandé. Nommer les fonctions %
  \code{amean}, %
  \code{gmean}, %
  \code{hmean}, %
  \code{pscal}, %
  \code{norm1} et %
  \code{normINF}, %
  dans l'ordre.
  \begin{sol}
    \begin{enumerate}
      \stepcounter{enumi}
    \item
<<echo=TRUE, eval=FALSE>>=
amean <- function(x) sum(x)/length(x)
@
    \item
<<echo=TRUE, eval=FALSE>>=
gmean <- function(x) prod(x)^(1/length(x))
@
    \item
<<echo=TRUE, eval=FALSE>>=
hmean <- function(x) 1/prod(1/x)
@
    \item
<<echo=TRUE, eval=FALSE>>=
pscal <- function(x, y) sum(x * y)
@
    \item
<<echo=TRUE, eval=FALSE>>=
norm1 <- function(x, y) sum(abs(x - y))
@
    \item
<<echo=TRUE, eval=FALSE>>=
normINF <- function(x, y) max(abs(x - y))
@
    \end{enumerate}
  \end{sol}
\end{exercice}

\begin{exercice}
  \label{ex:fonctions:prodmat}
  Le produit matriciel entre deux matrices
  $\mat{A} = [a_{ij}]_{m \times p}$ et
  $\mat{B} = [b_{ij}]_{p \times n}$ est une matrice $m \times n$ dont
  l'élément en position $(i, j)$ est
  \begin{equation*}
    \sum_{k = 1}^p a_{ik} b_{kj}.
  \end{equation*}

  Sans utiliser l'opérateur \code{\%*\%}, écrire une fonction
  \code{prod\_mat} qui effectuera le produit matriciel entre deux
  matrices seulement si les dimensions de celles-ci le permettent.
  Cette fonction aura deux arguments (\code{A} et \code{B}) et devra
  tout d'abord vérifier si le produit matriciel est possible. Si
  celui-ci est impossible, la fonction retourne un message d'erreur.
  Utiliser une structure de contrôle \code{if ... else ...} et deux
  boucles. Comparer le résultat avec celui de l'opérateur
  \code{\%*\%}.
  \begin{sol}
\begin{Schunk}
\begin{Verbatim}
prod_mat <- function(A, B)
{
    if (ncol(A) != nrow(B))
        stop("dimensions incompatibles")

    res <- matrix(0, nrow = nrow(A),
                  ncol = ncol(B))
    for (i in seq_len(nrow(A)))
    {
        for (j in seq_len(ncol(B)))
        {
            res[i, j] <- sum(A[i, ] * B[, j])
        }
    }
    res
}
\end{Verbatim}
\end{Schunk}
  \end{sol}
\end{exercice}

\begin{exercice}[nosol]
  \label{ex:fonctions:rstudio-tab-width}
  Configurer votre éditeur de texte pour indenter le code R de quatre
  (4) caractères. Dans RStudio, ouvrir le panneau des options
  globales, sélectionner la catégorie \code{Code} et inscrire la
  valeur \code{4} dans le champs \code{Tab width} (voir la
  \autoref{fig:fonctions:rstudio-tab-width}).
  \begin{figure}
    \centering
    \includegraphics{images/rstudio-tab-width}
    \caption{Réglage de RStudio pour une indentation du code
      de quatre caractères}
    \label{fig:fonctions:rstudio-tab-width}
  \end{figure}
\end{exercice}

\begin{exercice}
  Présenter le code ci-dessous selon les normes d'espacement,
  d'indentation et de positionnement des accolades mentionnées à la
  \autoref{sec:fonctions:pratiques}. Pour ajuster
  automatiquement l'indentation avec RStudio, sélectionner le bloc de
  code et choisir dans les menus \code{Code|Reformat Code}.

\begin{Schunk}
\begin{Verbatim}
f <- function(x){
  if(all(x>=0)|| all(x<=0))
  { stop("all x are the same sign")
  }
  if (sum(diff(sign(x[x!=0]))!=0)>1)
  warning("more than one sign change")
 r<-polyroot(x)
i<-1/Re(r)[abs(Im(r))< .Machine$double.eps^0.5]-1
i[i > -1]
}
\end{Verbatim}
\end{Schunk}
\begin{sol}
  La présentation correcte comporte des espaces autour de tous les
  opérateurs, une indentation de quatre (4) caractères et des
  accolades ouvrante et fermante placées sur leur propre ligne.
\begin{Schunk}
\begin{Verbatim}[fontsize=\relsize{-1}]
tri <- function(x)
{
    if (all(x >= 0) || all(x <= 0))
    {
        stop("all x are the same sign")
    }
    if (sum(diff(sign(x[x != 0])) != 0) > 1)
        warning("more than one sign change")
    r <- polyroot(x)
    i <- 1/Re(r)[abs(Im(r)) < .Machine$double.eps^0.5] - 1
    i[i > -1]
}
\end{Verbatim}
\end{Schunk}
\end{sol}
\end{exercice}

\Closesolutionfile{solutions}

%%% Local Variables:
%%% mode: noweb
%%% TeX-engine: xetex
%%% TeX-master: "programmer-avec-r"
%%% coding: utf-8
%%% End:
