%%% Copyright (C) 2019 Vincent Goulet
%%%
%%% Ce fichier fait partie du projet
%%% «Programmer avec R»
%%% https://gitlab.com/vigou3/programmer-avec-r
%%%
%%% Cette création est mise à disposition sous licence
%%% Attribution-Partage dans les mêmes conditions 4.0
%%% International de Creative Commons.
%%% https://creativecommons.org/licenses/by-sa/4.0/

\chapter{Présentation de R}
\label{chap:presentation}

\def\scriptfilename{\currfilebase.R}
\SweaveOpts{echo=FALSE}

<<echo=FALSE, results=hide>>=
source(".Sweaveprofile")   # configuration
source("Stangle.R")        # lancement de Stangle
@
<<script>>=
## Copyright (C) 2019 Vincent Goulet
##
## Ce fichier fait partie du projet
## «Programmer avec R»
## https://gitlab.com/vigou3/programmer-avec-r
##
## Cette création est mise à disposition sous licence
## Attribution-Partage dans les mêmes conditions 4.0
## International de Creative Commons.
## https://creativecommons.org/licenses/by-sa/4.0/
@

\begin{objectifs}
\item Connaitre la provenance du langage R et les principes ayant
  guidé son développement.
\item Utiliser R de manière interactive.
\item Créer, modifier et utiliser des fichiers de script R.
\end{objectifs}

R est un environnement intégré de manipulation de données, de calcul
et de préparation de graphiques. Toutefois, ce n'est pas seulement un
«autre» environnement statistique (comme SPSS ou SAS, par exemple),
mais aussi un langage de programmation complet et autonome. Le présent
ouvrage met l'accent sur l'apprentissage du langage de programmation.
Néanmoins, vous devrez l'utiliser à l'intérieur de l'interface de
l'environnement statistique. Ce chapitre vise à vous familiariser avec
celle-ci, avec les fichiers de script et avec l'utilisation d'un
éditeur de texte ou d'un environnement de développement intégré.


\section{Bref historique}
\label{sec:presentation:historique}

À l'origine fut le S\index{S}, un langage pour «programmer avec des
données» développé chez Bell Laboratories à partir du milieu des
années 1970 par une équipe de chercheurs menée par John~M.\ Chambers.
Au fil du temps, le S a connu quatre principales versions communément
identifiées par la couleur du livre dans lequel elles étaient
présentées: %
version «originale» \citep[\emph{Brown Book;}][]{Chambers:brownbook:1984}, %
version 2 \citep[\emph{Blue Book;}][]{Chambers:bluebook:1988}, %
version 3 \citep[\emph{White Book;}][]{Chambers:whitebook:1992} et %
version 4 \citep[\emph{Green Book;}][]{Chambers:greenbook:1998}; %
voir aussi \cite{Chambers:evolution} et \cite{Becker:historyS:1994}
pour plus de détails.

Dès la fin des années 1980 et pendant près de vingt ans, le S a été
popularisé par une mise en œuvre commerciale nommée
S-PLUS\index{S-PLUS}. En 2008, Lucent Technologies a vendu le langage
S à Insightful Corporation, ce qui a effectivement stoppé le
développement du langage par ses auteurs originaux. Le système S a
ensuite été commercialisé de manière relativement confidentielle sous
le nom Spotfire S$+$\index{S$+$} par TIBCO Software. Le terme S$+$ est
aujourd'hui disparu du nom du produit.

Ce qui a fortement contribué à la perte d'influence de S-PLUS, c'est
une nouvelle mise en œuvre du langage développée à partir du milieu
des années 1990 par Ross Ihaka et Robert Gentleman. Ceux-ci basent leur
nouveau langage sur Scheme\index{Scheme} (un dialecte du
\index{Lisp}Lisp), sans doute inspirés en cela par les travaux de Luke
Tierney sur le système statistique LISP-STAT
\citep{Tierney:lispstat:1990}. S'ils conservent en grande partie la
sémantique de Scheme, Ihaka et Gentleman ont toutefois la bonne idée
d'adopter la syntaxe du S, qu'ils jugent plus intuitive pour les
statisticiens. La comparaison des mises en œuvre en Scheme et en S de
la toute simple fonction factorielle, à la
\autoref{fig:presentation:scheme_vs_s}, tend à leur donner raison.

\begin{figure}
\begin{Verbatim}[frame=single]
(define factorial (lambda (n)
  (if (= n 1)
      1
    (* n (factorial (- n 1))))))
\end{Verbatim}
  \medskip
\begin{Verbatim}[frame=single]
factorial <- function(n)
  if (n == 1) 1 else n * factorial(n - 1)
\end{Verbatim}
  \caption[Mises en œuvre en Scheme et en S de la fonction
  factorielle]{%
    Mises en œuvre en Scheme (en haut) et en S (en bas) de la fonction
    factorielle}
  \label{fig:presentation:scheme_vs_s}
\end{figure}

Afin de souligner à la fois l'influence de S et leurs propres efforts,
Ross Ihaka et Robert Gentleman choisissent de nommer leur langage pour
l'analyse de données et les graphiques avec la première lettre de leur
prénom respectif: R \citep{Ihaka:R:1996}. À la suggestion de
Martin Maechler de l'ETH de Zurich, ils décident d'intégrer leur
nouveau langage au projet \link{https://www.gnu.org}{GNU}, faisant de
R un logiciel libre.

Ainsi disponible gratuitement et ouvert aux contributions de tous,
R gagne rapidement en popularité là même où S-PLUS avait acquis ses
lettres de noblesse, soit dans les milieux académiques. De simple
dérivé «\emph{not unlike S}», R devient un concurrent sérieux à
S-PLUS, puis le surpasse lorsque les efforts de développement se
rangent massivement derrière le projet libre. D'ailleurs John Chambers
place aujourd'hui ses efforts de réflexion et de développement dans le
projet R \citep{Chambers:R:2008}.

À partir du début de la décennie 2010, l'analyse de données, l'analyse
prédictive et l'intelligence artificielle font une entrée fracassante
dans la liste des outils d'affaires incontournables. Déjà bien établi
dans ces domaines, R devient, avec \index{Python}Python, la
\emph{lingua franca} de la science des données.


\section{Description sommaire de R}
\label{sec:presentation:description}

Tel que mentionné précédemment, le R est un langage principalement
inspiré de Scheme\index{Scheme} \citep{Sussman:scheme:1996} et du
\index{S}S. Ce dernier était à son tour inspiré de plusieurs langages,
dont l'\index{APL}APL et le \index{Lisp}Lisp (encore lui). Comme tous
ses prédécesseurs, R est un langage interprété. Par conséquent, le
programme que l'on lance lorsque l'on exécute R est en fait
l'\index{interpréteur}interpréteur. Celui-ci attend que l'on lui
soumette des commandes dans le langage R --- dans la suite nous dirons
que ces commandes forment une \index{expression}\emph{expression}.
L'interpréteur évalue immédiatement l'expression pour ensuite afficher
le résultat.

Par exemple, si l'on entre simplement un nombre à la ligne de commande
(identifiée ci-dessous par le caractère \code{>}), l'interpréteur
retourne la valeur de ce nombre.
<<echo=TRUE>>=
42
@

Nous pouvons aussi composer des expressions plus élaborées qui
combinent des nombres et des opérateurs mathématiques standards.
<<echo=TRUE>>=
2 + 3
1000 - 334
5 * 7
10/5
2.7 + 12.8
@

L'un des buts de cet ouvrage consiste justement à apprendre à
construire des suites d'expressions qui forment des programmes et qui
permettent de réaliser une tâche donnée.

Risquons une analogie avec le tableur \index{Excel}Excel, qui est
aussi un logiciel de manipulation de données, de mise en forme et de
préparation de graphiques. Or, au sens large, Excel est également un
langage de programmation interprété! Pensez-y: nous utilisons le
langage de programmation lorsque nous entrons des commandes dans une
cellule d'une feuille de calcul, puis
l'\index{interpréteur}interpréteur exécute les commandes et affiche
les résultats dans la cellule.

Le R est un langage particulièrement puissant pour les applications
mathématiques et statistiques, chose peu surprenante puisqu'il a
précisément été développé dans ce but. Parmi ses caractéristiques
particulièrement intéressantes, on note:
\begin{itemize}
\item langage basé sur la notion de vecteur, ce qui simplifie les
  calculs mathématiques et réduit considérablement le recours aux
  structures itératives (boucles \code{for}, \code{while}, etc.);
\item pas de typage ni de déclaration obligatoire des variables;
\item programmes courts, en général quelques lignes de code seulement;
\item temps de développement très court.
\end{itemize}

\videobox{\link{https://youtu.be/FnoMjJ9Knl0}{Présentation de R}}{%
  Visionnez la vidéo de
  \link{https://youtu.be/FnoMjJ9Knl0}{présentation de R}.}


\section{Interfaces}
\label{sec:presentation:interfaces}

R est d'abord et avant tout une application en ligne de commande,
comme le montre la \autoref{fig:presentation:console}. En soi, cela
n'est pas si différent d'un tableur tel que Excel: la zone d'entrée de
texte dans une cellule n'est rien d'autre qu'une invite de
commande\footnote{%
  Merci à Markus Gesmann pour cette observation.}, %
par ailleurs aux capacités d'édition plutôt réduites.

\begin{figure}
  \centering
  \includegraphics{images/console-screenshot}
  \caption{Fenêtre de la console sous macOS au démarrage de R}
  \label{fig:presentation:console}
\end{figure}

Sous Windows, l'interface graphique fournie avec R est plutôt
rudimentaire. Elle facilite certaines opérations tel que
l'installation de paquetages externes, mais elle n'offre autrement que
peu de fonctionnalités pour l'édition de code R.

L'interface graphique de R sous macOS est la plus élaborée. Outre la
console présentée à la \autoref{fig:presentation:console},
l'application \code{R.app} comporte de nombreuses fonctionnalités,
dont un éditeur de code assez complet.

Sous Unix et Linux, R n'est accessible que depuis la ligne de commande
du système d'exploitation. Aucune interface graphique n'est offerte
avec la distribution de base de R.

Peu importe la plateforme utilisée --- quoique dans une moindre mesure
sous macOS --- je recommande d'interagir avec R par le biais d'un
éditeur de texte pour programmeur ou d'un environnement de
développement intégré. Nous y reviendrons à la
\autoref{sec:presentation:editeurs}.

\enlargethispage{5mm}
\section{Stratégies de travail}
\label{sec:presentation:strategies}

Dans la mesure où R se présente essentiellement sous forme d'une
ligne de commande, il existe deux grandes stratégies de travail avec
cet environnement statistique.

\subsection{Code virtuel et objets réels}
\label{sec:presentation:strategies:code-virtuel}

Dans l'approche dite de «code virtuel et objets réels», on entre des
expressions à la ligne de commande pour les évaluer immédiatement.
<<echo=TRUE>>=
2 + 3
@

On peut également créer des objets contenant le résultat d'un calcul.
Ces objets sont stockés en mémoire dans %
l'\index{espace de travail}espace de travail %
de R.
<<echo=TRUE>>=
x <- exp(2)
x
@

Lorsque la session de travail est terminée, on sauvegarde une image de
l'espace de travail sur le disque dur de l'ordinateur afin de pouvoir
conserver les objets pour une future séance de
travail\index{save.image@\code{save.image}}.
<<eval=FALSE>>=
save.image()
@

Par défaut, l'image est sauvegardée dans un fichier nommé
\code{.RData} dans le répertoire de travail courant (plus de détails à
la \autoref{sec:presentation:workspace}) et cette image est
automatiquement chargée en mémoire au prochain lancement de R, tel
qu'indiqué à la fin du message d'accueil:
\begin{Schunk}
\begin{verbatim}
[Sauvegarde de la session précédente restaurée]
\end{verbatim}
\end{Schunk}

Cette approche a toutefois un gros inconvénient: le code utilisé pour
créer les objets n'est pas sauvegardé entre les sessions de travail.
Or, celui-ci est souvent bien plus compliqué que l'exemple ci-dessus.
De plus, sans accès au code qui a servi à créer l'objet \code{x},
comment savoir ce que la valeur \code{\Sexpr{format(x, dec = ".")}}
représente au juste?

\subsection{Code réel et objets virtuels}
\label{sec:presentation:strategies:code-reel}

L'approche dite de «code réel et objets virtuels» considère que ce
qu'il importe de conserver d'une session de travail à l'autre n'est
pas tant les objets que le code qui a servi à les créer. Ainsi, on
sauvegardera dans ce que l'on nommera des \emph{fichiers de script}
nos expressions R et le code de nos fonctions personnelles. Par
convention, on donne aux fichiers de script un nom se terminant avec
l'extension \code{.R}.

Avec cette approche, les objets sont créés au besoin en exécutant le
code des fichiers de script. Comment? Simplement en copiant le code du
fichier de script et en le collant dans la ligne de commande de R. La
\autoref{fig:presentation:script} illustre schématiquement ce que le
programmeur R a constamment sous les yeux: son fichier de script et la
ligne de commande R dans laquelle son code a été exécuté.

La méthode d'apprentissage préconisée dans cet ouvrage suppose que
vous utiliserez cette seconde approche d'interaction avec R.

\begin{figure}
  \centering
  \lstinputlisting[frame=single,language={},numbers=none]{include/script.R}
  \lstinputlisting[frame=single,language={},numbers=none,firstline=2]{include/script.Rout}
  \caption[Fichier de script et ligne de commande R]{Fichier de script
    (en haut) et ligne de commande R dans laquelle les expressions R
    ont été exécutées (en bas). Les lignes débutant par \code{\#} dans
    le fichier de script sont des commentaires ignorés par
    l'interpréteur de commandes.}
  \label{fig:presentation:script}
\end{figure}

\tipbox{Toute analogie est boiteuse, mais celle-ci peut néanmoins
  s'avérer utile pour illustrer l'approche «code réel, objets
  virtuels».

  Avec un tableur comme Excel, que choisiriez-vous si l'on vous
  proposait les options suivantes:
  \begin{enumerate}
  \item ne sauvegarder que les valeurs calculées d'une feuille de
    calcul;
  \item ne sauvegarder que les formules d'une feuille de calcul,
    quitte à les réévaluer par la suite pour obtenir les valeurs
    correspondantes.
  \end{enumerate}
  La seconde, assurément{\dots} Or, sauvegarder %
  l'\Index{espace de travail}espace de travail %
  R dans un fichier \code{.RData} (l'approche «objets réels, code
  virtuel») correspond à la première option, alors que sauvegarder le
  code source des fichiers de script correspond à la seconde.

  Là où l'analogie est boiteuse, la raison pour laquelle on n'a
  jamais à se poser la question avec un tableur, c'est que le
  progiciel évalue constamment et en temps réel les formules pour
  afficher les résultats dans les cellules.}

\importantbox{Dans les fichiers de script comme à la ligne de commande, le
  caractère \code{\#} marque le début d'un
  \index{commentaire}commentaire dans R. Ainsi, tout ce qui est inclus
  entre ce caractère et le saut à la ligne suivant est complètement
  ignoré par l'interpréteur.}


\section{Éditeurs de texte et environnements intégrés}
\label{sec:presentation:editeurs}

Dans la mesure où l'on a recours à des fichiers de script tel
qu'expliqué à la section précédente, l'édition de code R est rendue
beaucoup plus aisée avec un bon éditeur de texte pour programmeur ou
un environnement de développement intégré (\emph{integrated
  development environment}, IDE).

Un éditeur de texte est différent d'un traitement de texte en ce qu'il
s'agit d'un logiciel destiné à la création, l'édition et la sauvegarde
de fichiers textes purs, c'est-à-dire dépourvus d'information de
présentation et de mise en forme. Les applications Bloc-notes sous
Windows ou TextEdit sous macOS sont deux exemples d'éditeurs de texte
simples.

Un éditeur de texte pour programmeur saura en plus reconnaitre la
syntaxe d'un langage de programmation et assister à sa mise en forme:
indentation automatique du code, marquage des mots-clés, manipulation
d'objets, etc. Enfin, un éditeur compatible avec R réduira, entre
autres, l'opération de copier-coller à un simple raccourci clavier.

Vous pouvez utiliser le logiciel de votre choix pour l'édition de code
R. Certains éditeurs offrent simplement plus de fonctionnalités que
d'autres. Voici quelques bons choix.

\begin{itemize}
\item RStudio\index{RStudio} est un environnement de développement
  intégré (IDE) créé spécifiquement pour travailler avec R. Sa
  popularité connait une progression foudroyante depuis 2014. Il
  permet de consulter dans une interface conviviale ses fichiers de
  script, la ligne de commande R, les rubriques d'aide, les
  graphiques, etc.; voir la \autoref{fig:presentation:rstudio}. C'est
  probablement le meilleur choix d'éditeur pour la plupart des
  personnes qui débutent avec R.

  \begin{figure}[t]
    \centering
    \includegraphics[width=0.9\textwidth]{images/rstudio-screenshot}
    \caption[Fenêtre de RStudio sous macOS dans sa configuration par
    défaut]{Fenêtre de RStudio sous macOS dans sa configuration par
      défaut. Dans le sens des aiguilles d'une montre, on y retrouve:
      le fichier de script de la \autoref{fig:presentation:script}; la
      liste des objets de l'environnement (vide, ici); une interface
      pour charger des paquetages; la ligne de commande R.}
    \label{fig:presentation:rstudio}
  \end{figure}

  Logiciel libre dans sa version pour ordinateur personnel, RStudio
  est disponible pour les plateformes Windows, macOS et Linux.
  L'\autoref{chap:rstudio} propose une introduction à RStudio.
\item Dans la catégorie des éditeurs de texte, je recommande le
  vénérable et très puissant éditeur pour programmeur
  GNU~Emacs\index{Emacs}. À la question~6.2 de la foire aux questions
  de R \citep{R-FAQ}, «Devrais-je utiliser R à l'intérieur de
  Emacs?»\index{Emacs}, la réponse est: «Oui, absolument.» En effet,
  combiné avec le mode ESS\index{Emacs!mode ESS} (\emph{Emacs Speaks
    Statistics}), Emacs offre un environnement de développement
  particulièrement riche et efficace. Il a d'ailleurs servi
  d'inspiration à RStudio à maints égards, notamment pour la
  disposition du fichier de script et de la ligne de commande R dans
  une seule fenêtre. La \autoref{fig:presentation:emacs} présente une
  fenêtre de GNU Emacs en mode d'édition de code R.

  Emblème du logiciel libre, Emacs est disponible gratuitement et est
  identique sur toutes les plateformes supportées par R, dont
  Windows, macOS et Linux. Consulter l'\autoref{chap:emacs+ess} pour
  en savoir plus sur GNU~Emacs et apprendre les commandes essentielles
  pour y faire ses premiers pas.

  Le principal avantage de Emacs par rapport à RStudio réside dans le
  fait qu'il s'agit d'un éditeur pour programmeur généraliste qui sait
  s'adapter à n'importe quel langage --- y compris R. Cela permet
  d'utiliser un seul et même outil pour toutes ses tâches de
  programmation, tel que recommandé par
  \citet[chapitre~3]{Hunt:pragmatic:1999}:
  \begin{quote}
    Utilisez un seul éditeur et utilisez-le bien. Votre éditeur
    devrait devenir une extension de votre main; assurez-vous qu'il
    est configurable, extensible et programmable.
  \end{quote}
  Emacs satisfait les trois conditions ci-dessus. Cependant, la
  puissance de l'éditeur a un coût: Emacs est un logiciel difficile à
  apprivoiser, surtout pour les personnes moins à l'aise avec
  l'informatique. Si vous en êtes à votre première expérience avec un
  éditeur de texte, optez pour RStudio.

  \begin{figure}[t]
    \centering
    \includegraphics[width=0.9\textwidth]{images/emacs-screenshot}
    \caption[Fenêtre de GNU Emacs sous macOS en mode d'édition de code
    R]{Fenêtre de GNU Emacs sous macOS en mode d'édition de code R.
      Dans la partie du haut, on retrouve le fichier de script de la
      \autoref{fig:presentation:script} et dans la partie du bas, la
      ligne de commande R.}
    \label{fig:presentation:emacs}
  \end{figure}
\item Il existe plusieurs autres options pour éditer efficacement du
  code R --- et le Bloc-notes de Windows n'en fait \emph{pas} partie!
  Je recommande plutôt:
  \begin{itemize}
  \item sous Windows, l'éditeur Notepad++\index{Notepad++} additionné
    de l'extension NppToR \citep{NppToR}, tous deux des logiciels
    libres, ou le partagiciel WinEdt\index{WinEdt} muni de l'extension
    libre R-WinEdt \citep{RWinEdt};
  \item sous macOS, tout simplement l'éditeur de texte très complet
    intégré à l'application \code{R.app}, ou alors l'éditeur de texte
    commercial TextMate (essai gratuit de 30 jours);
  \item sous Linux, Vim et Kate semblent les choix les plus populaires
    dans la communauté R, après Emacs et RStudio.
  \end{itemize}
\end{itemize}


\section{Anatomie d'une session de travail}
\label{sec:presentation:session}

Dans ses grandes lignes, une session de travail avec R comporte les
étapes ci-dessous.
\begin{enumerate}
\item Démarrer une session R en cliquant sur l'icône de l'application
  si l'on utilise une interface graphique ou RStudio, ou alors en
  suivant la procédure appropriée pour travailler avec son éditeur de
  texte.
\item Ouvrir un fichier de script existant ou en créer un nouveau à
  l'aide de l'éditeur de texte de son choix.
\item Bâtir graduellement un fichier de script en y consignant le code
  R que l'on souhaite sauvegarder et les commentaires qui permettront
  de s'y retrouver plus tard. Tester les commandes à la ligne de
  commande. Au cours de la phase de développement, on fera
  généralement de nombreux aller-retours entre la ligne de commande et
  le fichier de script.
\item Sauvegarder son fichier de script et quitter l'éditeur ou
  l'environnement de développement.
\item Si nécessaire --- et c'est rarement le cas --- sauvegarder
  l'espace de travail de la session R avec
  \code{save.image()}\index{save.image@\code{save.image}}. En fait, on ne voudra
  sauvegarder nos objets R que lorsque ceux-ci sont très longs à créer
  comme, par exemple, les résultats d'une simulation.
\item Quitter R en tapant \code{q()}\index{q@\code{q}} à la ligne de
  commande ou en fermant l'interface graphique par la procédure
  usuelle. Encore ici, la manière de procéder est quelque peu
  différente dans GNU~Emacs; voir l'\autoref{chap:emacs+ess}.
\end{enumerate}
Les étapes 1 et 2 sont interchangeables, tout comme les étapes 4, 5 et
6. Consultez l'\autoref{chap:emacs+ess} pour la procédure à suivre
détaillée lorsque l'on utilise GNU~Emacs, ou l'\autoref{chap:rstudio}
pour l'environnement intégré RStudio.

<<script, results=hide>>=
###
### COMMANDES R            `\labelline{presentation}`
###

## Les expressions entrées à la ligne de commande sont
## immédiatement évaluées et le résultat est affiché à
## l'écran, comme avec une grosse calculatrice.
1                          # une constante
(2 + 3 * 5)^2/7            # expression mathématique
exp(3)                     # fonction exponentielle
sin(pi/2) + cos(pi/2)      # fonctions trigonométriques
gamma(5)                   # fonction gamma

## Lorsqu'une expression est syntaxiquement incomplète,
## l'invite de commande change de '> ' à '+ '.
2 -                        # expression incomplète
5 *                        # toujours incomplète
3                          # complétée

## Taper le nom d'un objet affiche son contenu. Pour une
## fonction, c'est son code source qui est affiché.
pi                         # constante numérique intégrée
letters                    # chaîne de caractères intégrée
LETTERS                    # version en majuscules
rnorm                      # fonction

###
### EXEMPLE DE SESSION DE TRAVAIL
###
### (Inspiré de l'annexe A du manuel «An Introduction to R»
### livré avec R.)
###

## Afficher le répertoire de travail de R.
getwd()

## Générer deux vecteurs de nombres pseudo-aléatoires issus
## d'une loi normale centrée réduite.
x <- rnorm(50)
y <- rnorm(x)

## Graphique des couples (x, y).
plot(x, y)

## Graphique d'une approximation de la densité du vecteur x.
plot(density(x))

## Générer la suite 1, 2, ..., 10.
1:10

## La fonction 'seq' peut générer des suites plus générales.
seq(from = -5, to = 10, by = 3)
seq(from = -5, length = 10)

## La fonction 'rep' répète des valeurs.
rep(1, 5)          # répéter 1 cinq fois
rep(1:5, 5)        # répéter le vecteur 1,...,5 cinq fois
rep(1:5, each = 5) # répéter chaque élément du vecteur cinq fois

## Arithmétique vectorielle.
v <- 1:12               # initialisation d'un vecteur
v + 2                   # additionner 2 à chaque élément de v
v * -12:-1              # produit élément par élément
v + 1:3                 # le vecteur le plus court est recyclé

## Vecteur de nombres uniformes sur l'intervalle [1, 10].
v <- runif(12, min = 1, max = 10)
v

## Pour afficher le résultat d'une affectation, placer la
## commande entre parenthèses.
( v <- runif(12, min = 1, max = 10) )

## Arrondi des valeurs de v à l'entier près.
( v <- round(v) )

## Créer une matrice 3 x 4 à partir des valeurs de
## v. Remarquer que la matrice est remplie par colonne.
( m <- matrix(v, nrow = 3, ncol = 4) )

## Les opérateurs arithmétiques de base s'appliquent aux
## matrices comme aux vecteurs.
m + 2
m * 3
m ^ 2

## Éliminer la quatrième colonne afin d'obtenir une matrice
## carrée.
( m <- m[,-4] )

## Transposée et inverse de la matrice m.
t(m)
solve(m)

## Produit matriciel.
m %*% m                  # produit de m avec elle-même
m %*% solve(m)           # produit de m avec son inverse
round(m %*% solve(m))    # l'arrondi donne la matrice identité

## Consulter la rubrique d'aide de la fonction 'solve'.
##-!- ?solve

## Liste des objets dans l'espace de travail.
ls()

## Nettoyage.
rm(x, y, v, m)             #-*- `\labelline{presentation:fin}`
@

\gotorbox{C'est le temps de vous lancer dans une première session de
  travail avec R.

  Le fichier de script \code{\scriptfilename} livré avec le présent
  document et reproduit à la \autoref{sec:presentation:exemples}
  contient du code qui passe en revue quelques unes des
  fonctionnalités de R. Ouvrez ce fichier dans votre éditeur de texte,
  puis exécutez une par une les lignes \reflines{presentation} en
  prenant bien soin de lire les commentaires et d'examiner les
  résultats.

  Poursuivez la lecture une fois la session de travail terminée. (En
  consultation électronique, les numéros de lignes dans le code
  informatique permettent de revenir ici directement.)}


\section{Répertoire de travail}
\Index{repertoire@répertoire de travail}
\index{dossier de travail|see{répertoire de travail}}
\label{sec:presentation:workspace}

Le répertoire de travail (\emph{workspace}) de R est le répertoire par
défaut dans lequel le logiciel, d'une part, recherche des fichiers de
script ou de données et, d'autre part, sauvegarde %
l'\index{espace de travail}espace de travail %
dans le fichier \code{.RData}. Le répertoire de travail est déterminé
au lancement de R. La fonction \Icode{getwd} permet d'afficher le
répertoire de travail courant de R.
<<echo=TRUE, eval=FALSE>>=
getwd()
@

Les interfaces graphiques de R démarrent avec un répertoire de travail
par défaut. Il est possible de le changer avec la commande
\Icode{setwd} ou à partir du menu \texttt{Fichier} (Windows) ou
\texttt{Divers} (macOS). Consulter aussi les foires aux questions
spécifiques aux interfaces graphiques \citep{Rw-FAQ,RMacOSX-FAQ} pour
des détails additionnels sur la gestion des répertoires de travail.

Dans RStudio, on change le répertoire de travail via le menu
\code{Session}.

Avec GNU~Emacs, la situation est un peu plus simple puisque l'on doit
spécifier un répertoire de travail au lancement d'un processus R; ceci
est expliqué plus en détail à l'\autoref{chap:emacs+ess}.


\section{Consulter l'aide en ligne}
\label{sec:presentation:aide}

Les rubriques d'aide des diverses fonctions de R contiennent une foule
d'informations ainsi que des exemples d'utilisation. Leur consultation
est tout à fait essentielle.

Les fonctions \Icode{?} et \Icode{help} permettent de consulter
la rubrique d'aide d'une fonction ou d'un autre type d'objet.
\begin{Schunk}
\begin{Verbatim}[commandchars=\\\{\}]
> ?\meta{fonction}
> help(\meta{fonction})
\end{Verbatim}
\end{Schunk}

La fonction \Icode{help.search} permet quant à elle de rechercher
de l'aide sur un sujet.
\begin{Schunk}
\begin{Verbatim}[commandchars=\\\{\}]
help.search("\meta{sujet}")
\end{Verbatim}
\end{Schunk}

Enfin, le système d'aide de R contient bon nombre de documents plus
longs en format PDF. Les «vignettes» abordent habituellement une
thématique dans son ensemble plutôt que simplement par le biais d'une
suite de fonctions.
\begin{Schunk}
\begin{Verbatim}[commandchars=\\\{\}]
vignette("\meta{sujet}")
\end{Verbatim}
\end{Schunk}


\section{Où trouver de la documentation}
\label{sec:presentation:doc}

La documentation officielle de R se compose de six guides accessibles
depuis le menu \texttt{Aide} des interfaces graphiques ou encore
\link{https://cran.r-project.org/manuals.html}{en ligne} dans le site
du projet R. Pour les débutants, seuls \emph{An Introduction to R} et,
possiblement, \emph{R Data Import/Export} peuvent s'avérer des
ressources utiles à court terme.

Depuis plusieurs années maintenant, les ouvrages de
\citet{Venables:s:2000,MASS} demeurent des références standards
\emph{de facto} sur les langages S et R. Plus récents,
\cite{Braun:Rprogramming:2007,Braun:Rprogramming:2e:2016} participent du
même effort que le présent ouvrage en se concentrant sur la
programmation en R plutôt que sur ses applications statistiques.


\section{Exemples}
\label{sec:presentation:exemples}

\scriptfile{\scriptfilename}
\lstinputlisting[firstline=\scriptfirstline]{\scriptfilename}


\section{Exercices}
\label{sec:presentation:exercices}

\begin{exercice}[nosol]
  Démarrer une session R et entrer une à une les expressions
  ci-dessous à la ligne de commande. Observer les résultats.
<<eval=FALSE>>=
ls()
pi
(v <- c(1, 5, 8))
v * 2
x <- v + c(2, 1, 7)
x
ls()
q()
@
\end{exercice}

\begin{exercice}[nosol]
  Ouvrir dans un éditeur de texte le fichier de script
  \code{\scriptfilename} reproduit à la section précédente. Exécuter
  le code ligne par ligne et observer les résultats. Répéter
  l'exercice avec un ou deux autres éditeurs de texte afin de les
  comparer et de vous permettre d'en choisir un pour la suite.
\end{exercice}

\begin{exercice}[nosol]
  Consulter les rubriques d'aide d'une ou plusieurs des fonctions
  rencontrées lors de l'exercice précédent. Observer d'abord comment
  les rubriques d'aide sont structurées --- elles sont toutes
  identiques --- puis exécuter quelques expressions tirées des sections
  d'exemples.
\end{exercice}

\begin{exercice}[nosol]
  \index{repertoire@répertoire de travail}%
  Identifier le répertoire de travail de votre session de travail R,
  puis localiser ce répertoire dans le système de fichier de votre
  poste de travail. Changer ensuite le répertoire de travail de R pour
  un autre répertoire.
\end{exercice}

\begin{exercice}[nosol]
  Exécuter le code de l'exemple de session de travail R que l'on
  trouve à l'annexe~A de \citet{R-intro}. En plus d'aider à se
  familiariser avec R, cet exercice permet de découvrir les
  fonctionnalités du logiciel en tant qu'outil statistique.
\end{exercice}

%%% Local Variables:
%%% mode: noweb
%%% TeX-engine: xetex
%%% TeX-master: "programmer-avec-r"
%%% coding: utf-8
%%% End:
